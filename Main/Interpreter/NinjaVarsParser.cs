//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NinjaVars.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class NinjaVarsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPSEP=1, INTKEY=2, DOUBLEKEY=3, BOOLKEY=4, ASSIGN=5, ADD=6, SUB=7, MUL=8, 
		DIV=9, ADDASSIGN=10, SUBASSIGN=11, MULASSIGN=12, DIVASSIGN=13, AND=14, 
		OR=15, LESS=16, GREATER=17, EQUAL=18, NOTEQUAL=19, LESSEQUAL=20, GREQUAL=21, 
		LPAREN=22, RPAREN=23, WS=24, BOOL=25, DOUBLE=26, INT=27, ID=28;
	public const int
		RULE_program = 0, RULE_operation = 1, RULE_ariphOperand = 2, RULE_ariphTerm = 3, 
		RULE_ariphExpr = 4, RULE_ariphExprEx = 5, RULE_boolOperand = 6, RULE_boolExpr = 7, 
		RULE_boolExprEx = 8, RULE_declare = 9;
	public static readonly string[] ruleNames = {
		"program", "operation", "ariphOperand", "ariphTerm", "ariphExpr", "ariphExprEx", 
		"boolOperand", "boolExpr", "boolExprEx", "declare"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", "'int'", "'double'", "'bool'", "'='", "'+'", "'-'", "'*'", 
		"'/'", "'+='", "'-='", "'*='", "'/='", "'&&'", "'||'", "'<'", "'>'", "'=='", 
		"'!='", "'<='", "'>='", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPSEP", "INTKEY", "DOUBLEKEY", "BOOLKEY", "ASSIGN", "ADD", "SUB", 
		"MUL", "DIV", "ADDASSIGN", "SUBASSIGN", "MULASSIGN", "DIVASSIGN", "AND", 
		"OR", "LESS", "GREATER", "EQUAL", "NOTEQUAL", "LESSEQUAL", "GREQUAL", 
		"LPAREN", "RPAREN", "WS", "BOOL", "DOUBLE", "INT", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NinjaVars.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NinjaVarsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    public class VarData
	    {
	        public enum VarType
	        {
	            Int, Double, Bool
	        };

	        public VarType type;
	        public dynamic value;
	    }
	 
	    public static Dictionary<string, VarData> varTable = new Dictionary<string, VarData>();
	    
	    public static void Debug(string line)
	    {
	        Console.WriteLine(line);
	    }
	    
	    public static void Error(string message)
	    {
	        ConsoleColor curr = Console.ForegroundColor;
	        Console.ForegroundColor = ConsoleColor.Red;
	        Console.WriteLine(message);
	        Console.ForegroundColor = curr;
	    }

		public NinjaVarsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NinjaVarsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode[] OPSEP() { return GetTokens(NinjaVarsParser.OPSEP); }
		public ITerminalNode OPSEP(int i) {
			return GetToken(NinjaVarsParser.OPSEP, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << LPAREN) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << ID))) != 0)) {
				{
				{
				State = 20; operation();
				State = 21; Match(OPSEP);
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 2, RULE_operation);
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28; ariphExprEx();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29; boolExprEx();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 30; declare();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphOperandContext : ParserRuleContext {
		public dynamic value;
		public IToken _INT;
		public IToken _DOUBLE;
		public IToken _ID;
		public AriphExprExContext _ariphExprEx;
		public ITerminalNode INT() { return GetToken(NinjaVarsParser.INT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(NinjaVarsParser.DOUBLE, 0); }
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaVarsParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaVarsParser.RPAREN, 0); }
		public AriphOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ariphOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterAriphOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitAriphOperand(this);
		}
	}

	[RuleVersion(0)]
	public AriphOperandContext ariphOperand() {
		AriphOperandContext _localctx = new AriphOperandContext(Context, State);
		EnterRule(_localctx, 4, RULE_ariphOperand);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; _localctx._INT = Match(INT);

				                   _localctx.value =  int.Parse((_localctx._INT!=null?_localctx._INT.Text:null));
				               
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; _localctx._DOUBLE = Match(DOUBLE);

				                   _localctx.value =  double.Parse((_localctx._DOUBLE!=null?_localctx._DOUBLE.Text:null));
				               
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 37; _localctx._ID = Match(ID);

				                   try
				                   {
				                     _localctx.value =  varTable[(_localctx._ID!=null?_localctx._ID.Text:null)].value;
				                   }
				                   catch (KeyNotFoundException)
				                   {
				                     Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                   }
				               
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39; Match(LPAREN);
				State = 40; _localctx._ariphExprEx = ariphExprEx();
				State = 41; Match(RPAREN);

				                   _localctx.value =  _localctx._ariphExprEx.value;
				               
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphTermContext : ParserRuleContext {
		public dynamic value;
		public AriphTermContext left;
		public AriphOperandContext _ariphOperand;
		public AriphOperandContext right;
		public AriphOperandContext ariphOperand() {
			return GetRuleContext<AriphOperandContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(NinjaVarsParser.MUL, 0); }
		public AriphTermContext ariphTerm() {
			return GetRuleContext<AriphTermContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(NinjaVarsParser.DIV, 0); }
		public AriphTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ariphTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterAriphTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitAriphTerm(this);
		}
	}

	[RuleVersion(0)]
	public AriphTermContext ariphTerm() {
		return ariphTerm(0);
	}

	private AriphTermContext ariphTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AriphTermContext _localctx = new AriphTermContext(Context, _parentState);
		AriphTermContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_ariphTerm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 47; _localctx._ariphOperand = ariphOperand();

			                _localctx.value =  _localctx._ariphOperand.value;
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 62;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 60;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new AriphTermContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ariphTerm);
						State = 50;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 51; Match(MUL);
						State = 52; _localctx.right = _localctx._ariphOperand = ariphOperand();

						                          _localctx.value =  _localctx.left.value * _localctx.right.value;
						                      
						}
						break;
					case 2:
						{
						_localctx = new AriphTermContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ariphTerm);
						State = 55;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 56; Match(DIV);
						State = 57; _localctx.right = _localctx._ariphOperand = ariphOperand();

						                          _localctx.value =  _localctx.left.value / _localctx.right.value;
						                      
						}
						break;
					}
					} 
				}
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AriphExprContext : ParserRuleContext {
		public dynamic value;
		public AriphExprContext left;
		public AriphTermContext _ariphTerm;
		public AriphTermContext right;
		public AriphTermContext ariphTerm() {
			return GetRuleContext<AriphTermContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(NinjaVarsParser.ADD, 0); }
		public AriphExprContext ariphExpr() {
			return GetRuleContext<AriphExprContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(NinjaVarsParser.SUB, 0); }
		public AriphExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ariphExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterAriphExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitAriphExpr(this);
		}
	}

	[RuleVersion(0)]
	public AriphExprContext ariphExpr() {
		return ariphExpr(0);
	}

	private AriphExprContext ariphExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AriphExprContext _localctx = new AriphExprContext(Context, _parentState);
		AriphExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_ariphExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 66; _localctx._ariphTerm = ariphTerm(0);

			                _localctx.value =  _localctx._ariphTerm.value;
			            
			}
			Context.Stop = TokenStream.LT(-1);
			State = 81;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 79;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new AriphExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ariphExpr);
						State = 69;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 70; Match(ADD);
						State = 71; _localctx.right = _localctx._ariphTerm = ariphTerm(0);

						                          _localctx.value =  _localctx.left.value + _localctx.right.value;
						                      
						}
						break;
					case 2:
						{
						_localctx = new AriphExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_ariphExpr);
						State = 74;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 75; Match(SUB);
						State = 76; _localctx.right = _localctx._ariphTerm = ariphTerm(0);

						                          _localctx.value =  _localctx.left.value - _localctx.right.value;
						                      
						}
						break;
					}
					} 
				}
				State = 83;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AriphExprExContext : ParserRuleContext {
		public dynamic value;
		public AriphExprContext _ariphExpr;
		public IToken _ID;
		public AriphExprExContext _ariphExprEx;
		public AriphExprContext ariphExpr() {
			return GetRuleContext<AriphExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(NinjaVarsParser.ASSIGN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode ADDASSIGN() { return GetToken(NinjaVarsParser.ADDASSIGN, 0); }
		public ITerminalNode SUBASSIGN() { return GetToken(NinjaVarsParser.SUBASSIGN, 0); }
		public ITerminalNode MULASSIGN() { return GetToken(NinjaVarsParser.MULASSIGN, 0); }
		public ITerminalNode DIVASSIGN() { return GetToken(NinjaVarsParser.DIVASSIGN, 0); }
		public AriphExprExContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ariphExprEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterAriphExprEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitAriphExprEx(this);
		}
	}

	[RuleVersion(0)]
	public AriphExprExContext ariphExprEx() {
		AriphExprExContext _localctx = new AriphExprExContext(Context, State);
		EnterRule(_localctx, 10, RULE_ariphExprEx);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; _localctx._ariphExpr = ariphExpr(0);

				                _localctx.value =  _localctx._ariphExpr.value;
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; _localctx._ID = Match(ID);
				State = 88; Match(ASSIGN);
				State = 89; _localctx._ariphExprEx = ariphExprEx();

				                try
				                {
				                    VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				                    if (data.value.GetType() == _localctx._ariphExprEx.value.GetType())
				                        data.value = _localctx._ariphExprEx.value;
				                    else if (data.type == VarData.VarType.Double)
				                        data.value = (double)_localctx._ariphExprEx.value;
				                    else
				                        Error("Can't convert \"" + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) + "\" to Int");
				                }
				                catch (KeyNotFoundException)
				                {
				                  Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                }
				            
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; _localctx._ID = Match(ID);
				State = 93; Match(ADDASSIGN);
				State = 94; _localctx._ariphExprEx = ariphExprEx();

				                try
				                {
				                    VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				                    if (data.value.GetType() == _localctx._ariphExprEx.value.GetType())
				                        data.value += _localctx._ariphExprEx.value;
				                    else if (data.type == VarData.VarType.Double)
				                        data.value += (double)_localctx._ariphExprEx.value;
				                    else
				                        Error("Can't convert \"" + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) + "\" to Int");
				                }
				                catch (KeyNotFoundException)
				                {
				                  Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                }
				            
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 97; _localctx._ID = Match(ID);
				State = 98; Match(SUBASSIGN);
				State = 99; _localctx._ariphExprEx = ariphExprEx();

				                try
				                {
				                    VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				                    if (data.value.GetType() == _localctx._ariphExprEx.value.GetType())
				                        data.value -= _localctx._ariphExprEx.value;
				                    else if (data.type == VarData.VarType.Double)
				                        data.value -= (double)_localctx._ariphExprEx.value;
				                    else
				                        Error("Can't convert \"" + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) + "\" to Int");
				                }
				                catch (KeyNotFoundException)
				                {
				                  Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                }
				            
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 102; _localctx._ID = Match(ID);
				State = 103; Match(MULASSIGN);
				State = 104; _localctx._ariphExprEx = ariphExprEx();

				                try
				                {
				                    VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				                    if (data.value.GetType() == _localctx._ariphExprEx.value.GetType())
				                        data.value *= _localctx._ariphExprEx.value;
				                    else if (data.type == VarData.VarType.Double)
				                        data.value *= (double)_localctx._ariphExprEx.value;
				                    else
				                        Error("Can't convert \"" + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) + "\" to Int");
				                }
				                catch (KeyNotFoundException)
				                {
				                  Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                }
				            
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 107; _localctx._ID = Match(ID);
				State = 108; Match(DIVASSIGN);
				State = 109; _localctx._ariphExprEx = ariphExprEx();

				                try
				                {
				                    VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				                    if (data.value.GetType() == _localctx._ariphExprEx.value.GetType())
				                        data.value /= _localctx._ariphExprEx.value;
				                    else if (data.type == VarData.VarType.Double)
				                        data.value /= (double)_localctx._ariphExprEx.value;
				                    else
				                        Error("Can't convert \"" + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) + "\" to Int");
				                }
				                catch (KeyNotFoundException)
				                {
				                  Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                }
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOperandContext : ParserRuleContext {
		public bool value;
		public IToken _BOOL;
		public IToken _ID;
		public AriphExprExContext left;
		public AriphExprExContext right;
		public ITerminalNode BOOL() { return GetToken(NinjaVarsParser.BOOL, 0); }
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode LESS() { return GetToken(NinjaVarsParser.LESS, 0); }
		public AriphExprExContext[] ariphExprEx() {
			return GetRuleContexts<AriphExprExContext>();
		}
		public AriphExprExContext ariphExprEx(int i) {
			return GetRuleContext<AriphExprExContext>(i);
		}
		public ITerminalNode GREATER() { return GetToken(NinjaVarsParser.GREATER, 0); }
		public ITerminalNode EQUAL() { return GetToken(NinjaVarsParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(NinjaVarsParser.NOTEQUAL, 0); }
		public ITerminalNode LESSEQUAL() { return GetToken(NinjaVarsParser.LESSEQUAL, 0); }
		public ITerminalNode GREQUAL() { return GetToken(NinjaVarsParser.GREQUAL, 0); }
		public BoolOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterBoolOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitBoolOperand(this);
		}
	}

	[RuleVersion(0)]
	public BoolOperandContext boolOperand() {
		BoolOperandContext _localctx = new BoolOperandContext(Context, State);
		EnterRule(_localctx, 12, RULE_boolOperand);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; _localctx._BOOL = Match(BOOL);

				                  _localctx.value =  bool.Parse((_localctx._BOOL!=null?_localctx._BOOL.Text:null));
				              
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; _localctx._ID = Match(ID);

				                  try
				                  {
				                      _localctx.value =  varTable[(_localctx._ID!=null?_localctx._ID.Text:null)].value;
				                  }
				                  catch (KeyNotFoundException)
				                  {
				                    Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                  }
				              
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118; _localctx.left = ariphExprEx();
				State = 119; Match(LESS);
				State = 120; _localctx.right = ariphExprEx();

				                  _localctx.value =  _localctx.left.value < _localctx.right.value;
				              
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 123; _localctx.left = ariphExprEx();
				State = 124; Match(GREATER);
				State = 125; _localctx.right = ariphExprEx();

				                  _localctx.value =  _localctx.left.value > _localctx.right.value;
				              
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 128; _localctx.left = ariphExprEx();
				State = 129; Match(EQUAL);
				State = 130; _localctx.right = ariphExprEx();

				                  _localctx.value =  _localctx.left.value == _localctx.right.value;
				              
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 133; _localctx.left = ariphExprEx();
				State = 134; Match(NOTEQUAL);
				State = 135; _localctx.right = ariphExprEx();

				                  _localctx.value =  _localctx.left.value != _localctx.right.value;
				              
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 138; _localctx.left = ariphExprEx();
				State = 139; Match(LESSEQUAL);
				State = 140; _localctx.right = ariphExprEx();

				                  _localctx.value =  _localctx.left.value <= _localctx.right.value;
				              
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 143; _localctx.left = ariphExprEx();
				State = 144; Match(GREQUAL);
				State = 145; _localctx.right = ariphExprEx();

				                  _localctx.value =  _localctx.left.value >= _localctx.right.value;
				              
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		public bool value;
		public BoolOperandContext _boolOperand;
		public BoolOperandContext left;
		public BoolExprContext right;
		public BoolOperandContext boolOperand() {
			return GetRuleContext<BoolOperandContext>(0);
		}
		public ITerminalNode OR() { return GetToken(NinjaVarsParser.OR, 0); }
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ITerminalNode AND() { return GetToken(NinjaVarsParser.AND, 0); }
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitBoolExpr(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		BoolExprContext _localctx = new BoolExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_boolExpr);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; _localctx._boolOperand = boolOperand();

				               _localctx.value =  _localctx._boolOperand.value;
				           
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; _localctx.left = boolOperand();
				State = 154; Match(OR);
				State = 155; _localctx.right = boolExpr();

				               _localctx.value =  _localctx.left.value || _localctx.right.value;
				           
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 158; _localctx.left = boolOperand();
				State = 159; Match(AND);
				State = 160; _localctx.right = boolExpr();

				               _localctx.value =  _localctx.left.value && _localctx.right.value;
				           
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprExContext : ParserRuleContext {
		public bool value;
		public BoolExprContext _boolExpr;
		public IToken _ID;
		public BoolExprExContext _boolExprEx;
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(NinjaVarsParser.ASSIGN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public BoolExprExContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExprEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterBoolExprEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitBoolExprEx(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprExContext boolExprEx() {
		BoolExprExContext _localctx = new BoolExprExContext(Context, State);
		EnterRule(_localctx, 16, RULE_boolExprEx);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; _localctx._boolExpr = boolExpr();

				              _localctx.value =  _localctx._boolExpr.value;
				           
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168; _localctx._ID = Match(ID);
				State = 169; Match(ASSIGN);
				State = 170; _localctx._boolExprEx = boolExprEx();

				              try
				              {
				                VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				                _localctx.value =  data.value = _localctx._boolExprEx.value;
				                if (data.type != VarData.VarType.Bool)
				                {
				                    Error("Can't convert " + data.type + " to Bool");
				                }
				              }
				              catch (KeyNotFoundException)
				              {
				                Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				              }
				           
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public IToken _ID;
		public AriphExprExContext _ariphExprEx;
		public BoolExprExContext _boolExprEx;
		public ITerminalNode INTKEY() { return GetToken(NinjaVarsParser.INTKEY, 0); }
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(NinjaVarsParser.ASSIGN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode DOUBLEKEY() { return GetToken(NinjaVarsParser.DOUBLEKEY, 0); }
		public ITerminalNode BOOLKEY() { return GetToken(NinjaVarsParser.BOOLKEY, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 18, RULE_declare);
		int _la;
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTKEY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; Match(INTKEY);
				State = 176; _localctx._ID = Match(ID);

				           VarData newVar = new VarData
				           {
				                type = VarData.VarType.Int,
				                value = 0
				           };
				           varTable.Add((_localctx._ID!=null?_localctx._ID.Text:null), newVar);
				           Debug("Create var " + (_localctx._ID!=null?_localctx._ID.Text:null));
				          
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 178; Match(ASSIGN);
					State = 179; _localctx._ariphExprEx = ariphExprEx();
					}
				}


				           if ((_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) != null)
				           {
				                Debug("\tAssigning it value of " + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null));
				                try
				                {
				                  VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				                  if (data.value.GetType() == _localctx._ariphExprEx.value.GetType())
				                    data.value = _localctx._ariphExprEx.value;
				                  else
				                    Error("Can't convert \"" + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) + "\" to Int");
				                }
				                catch (KeyNotFoundException)
				                {
				                  Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                }
				           }
				          
				}
				break;
			case DOUBLEKEY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; Match(DOUBLEKEY);
				State = 184; _localctx._ID = Match(ID);

				           VarData newVar = new VarData
				           {
				                type = VarData.VarType.Double,
				                value = 0.0
				           };
				           varTable.Add((_localctx._ID!=null?_localctx._ID.Text:null), newVar);
				           Debug("Create var " + (_localctx._ID!=null?_localctx._ID.Text:null));
				          
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 186; Match(ASSIGN);
					State = 187; _localctx._ariphExprEx = ariphExprEx();
					}
				}


				           if ((_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) != null)
				           {
				                Debug("\tAssigning it value of " + (_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null));
				                try
				                {
				                  VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				                  if (data.value.GetType() == _localctx._ariphExprEx.value.GetType())
				                    data.value = _localctx._ariphExprEx.value;
				                  else if (data.type == VarData.VarType.Double)
				                    data.value = (double)_localctx._ariphExprEx.value;
				                }
				                catch (KeyNotFoundException)
				                {
				                  Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                }
				           }
				          
				}
				break;
			case BOOLKEY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; Match(BOOLKEY);
				State = 192; _localctx._ID = Match(ID);

				           VarData newVar = new VarData
				           {
				                type = VarData.VarType.Bool,
				                value = false
				           };
				           varTable.Add((_localctx._ID!=null?_localctx._ID.Text:null), newVar);
				           Debug("Create var " + (_localctx._ID!=null?_localctx._ID.Text:null));
				          
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 194; Match(ASSIGN);
					State = 195; _localctx._boolExprEx = boolExprEx();
					}
				}


				           if ((_localctx._boolExprEx!=null?TokenStream.GetText(_localctx._boolExprEx.Start,_localctx._boolExprEx.Stop):null) != null)
				           {
				                Debug("\tAssigning it value of " + (_localctx._boolExprEx!=null?TokenStream.GetText(_localctx._boolExprEx.Start,_localctx._boolExprEx.Stop):null));
				                try
				                {
				                  varTable[(_localctx._ID!=null?_localctx._ID.Text:null)].value = _localctx._boolExprEx.value;
				                }
				                catch (KeyNotFoundException)
				                {
				                  Error("Variable " + (_localctx._ID!=null?_localctx._ID.Text:null) + " does not exist");
				                }
				           }
				          
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return ariphTerm_sempred((AriphTermContext)_localctx, predIndex);
		case 4: return ariphExpr_sempred((AriphExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool ariphTerm_sempred(AriphTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool ariphExpr_sempred(AriphExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1E', '\xCC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1A', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x1D', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\"', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'/', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '?', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x42', '\v', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'R', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'U', '\v', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 's', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x97', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\xA6', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\xB0', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB7', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xBF', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xC7', 
		'\n', '\v', '\x3', '\v', '\x5', '\v', '\xCA', '\n', '\v', '\x3', '\v', 
		'\x2', '\x4', '\b', '\n', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x2', '\x2', '\x2', '\xDF', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '!', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'.', '\x3', '\x2', '\x2', '\x2', '\b', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x43', '\x3', '\x2', '\x2', '\x2', '\f', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x96', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x5', '\x4', '\x3', 
		'\x2', '\x17', '\x18', '\a', '\x3', '\x2', '\x2', '\x18', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\"', '\x5', '\f', '\a', '\x2', '\x1F', '\"', '\x5', '\x12', '\n', '\x2', 
		' ', '\"', '\x5', '\x14', '\v', '\x2', '!', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x5', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', 
		'\x1D', '\x2', '\x2', '$', '/', '\b', '\x4', '\x1', '\x2', '%', '&', '\a', 
		'\x1C', '\x2', '\x2', '&', '/', '\b', '\x4', '\x1', '\x2', '\'', '(', 
		'\a', '\x1E', '\x2', '\x2', '(', '/', '\b', '\x4', '\x1', '\x2', ')', 
		'*', '\a', '\x18', '\x2', '\x2', '*', '+', '\x5', '\f', '\a', '\x2', '+', 
		',', '\a', '\x19', '\x2', '\x2', ',', '-', '\b', '\x4', '\x1', '\x2', 
		'-', '/', '\x3', '\x2', '\x2', '\x2', '.', '#', '\x3', '\x2', '\x2', '\x2', 
		'.', '%', '\x3', '\x2', '\x2', '\x2', '.', '\'', '\x3', '\x2', '\x2', 
		'\x2', '.', ')', '\x3', '\x2', '\x2', '\x2', '/', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\b', '\x5', '\x1', '\x2', '\x31', '\x32', 
		'\x5', '\x6', '\x4', '\x2', '\x32', '\x33', '\b', '\x5', '\x1', '\x2', 
		'\x33', '@', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\f', '\x4', 
		'\x2', '\x2', '\x35', '\x36', '\a', '\n', '\x2', '\x2', '\x36', '\x37', 
		'\x5', '\x6', '\x4', '\x2', '\x37', '\x38', '\b', '\x5', '\x1', '\x2', 
		'\x38', '?', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\f', '\x3', '\x2', 
		'\x2', ':', ';', '\a', '\v', '\x2', '\x2', ';', '<', '\x5', '\x6', '\x4', 
		'\x2', '<', '=', '\b', '\x5', '\x1', '\x2', '=', '?', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x34', '\x3', '\x2', '\x2', '\x2', '>', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '?', '\x42', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\b', '\x6', '\x1', '\x2', '\x44', '\x45', '\x5', '\b', 
		'\x5', '\x2', '\x45', '\x46', '\b', '\x6', '\x1', '\x2', '\x46', 'S', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\f', '\x4', '\x2', '\x2', 'H', 
		'I', '\a', '\b', '\x2', '\x2', 'I', 'J', '\x5', '\b', '\x5', '\x2', 'J', 
		'K', '\b', '\x6', '\x1', '\x2', 'K', 'R', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\f', '\x3', '\x2', '\x2', 'M', 'N', '\a', '\t', '\x2', '\x2', 
		'N', 'O', '\x5', '\b', '\x5', '\x2', 'O', 'P', '\b', '\x6', '\x1', '\x2', 
		'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'G', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'L', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 
		'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', '\v', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\x5', '\n', '\x6', '\x2', 'W', 'X', '\b', '\a', '\x1', 
		'\x2', 'X', 's', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '\x1E', '\x2', 
		'\x2', 'Z', '[', '\a', '\a', '\x2', '\x2', '[', '\\', '\x5', '\f', '\a', 
		'\x2', '\\', ']', '\b', '\a', '\x1', '\x2', ']', 's', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\a', '\x1E', '\x2', '\x2', '_', '`', '\a', '\f', '\x2', 
		'\x2', '`', '\x61', '\x5', '\f', '\a', '\x2', '\x61', '\x62', '\b', '\a', 
		'\x1', '\x2', '\x62', 's', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\a', '\x1E', '\x2', '\x2', '\x64', '\x65', '\a', '\r', '\x2', '\x2', 
		'\x65', '\x66', '\x5', '\f', '\a', '\x2', '\x66', 'g', '\b', '\a', '\x1', 
		'\x2', 'g', 's', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\x1E', '\x2', 
		'\x2', 'i', 'j', '\a', '\xE', '\x2', '\x2', 'j', 'k', '\x5', '\f', '\a', 
		'\x2', 'k', 'l', '\b', '\a', '\x1', '\x2', 'l', 's', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '\x1E', '\x2', '\x2', 'n', 'o', '\a', '\xF', '\x2', 
		'\x2', 'o', 'p', '\x5', '\f', '\a', '\x2', 'p', 'q', '\b', '\a', '\x1', 
		'\x2', 'q', 's', '\x3', '\x2', '\x2', '\x2', 'r', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'Y', '\x3', '\x2', '\x2', '\x2', 'r', '^', '\x3', '\x2', '\x2', 
		'\x2', 'r', '\x63', '\x3', '\x2', '\x2', '\x2', 'r', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'm', '\x3', '\x2', '\x2', '\x2', 's', '\r', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\a', '\x1B', '\x2', '\x2', 'u', '\x97', 
		'\b', '\b', '\x1', '\x2', 'v', 'w', '\a', '\x1E', '\x2', '\x2', 'w', '\x97', 
		'\b', '\b', '\x1', '\x2', 'x', 'y', '\x5', '\f', '\a', '\x2', 'y', 'z', 
		'\a', '\x12', '\x2', '\x2', 'z', '{', '\x5', '\f', '\a', '\x2', '{', '|', 
		'\b', '\b', '\x1', '\x2', '|', '\x97', '\x3', '\x2', '\x2', '\x2', '}', 
		'~', '\x5', '\f', '\a', '\x2', '~', '\x7F', '\a', '\x13', '\x2', '\x2', 
		'\x7F', '\x80', '\x5', '\f', '\a', '\x2', '\x80', '\x81', '\b', '\b', 
		'\x1', '\x2', '\x81', '\x97', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', 
		'\x5', '\f', '\a', '\x2', '\x83', '\x84', '\a', '\x14', '\x2', '\x2', 
		'\x84', '\x85', '\x5', '\f', '\a', '\x2', '\x85', '\x86', '\b', '\b', 
		'\x1', '\x2', '\x86', '\x97', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', 
		'\x5', '\f', '\a', '\x2', '\x88', '\x89', '\a', '\x15', '\x2', '\x2', 
		'\x89', '\x8A', '\x5', '\f', '\a', '\x2', '\x8A', '\x8B', '\b', '\b', 
		'\x1', '\x2', '\x8B', '\x97', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', 
		'\x5', '\f', '\a', '\x2', '\x8D', '\x8E', '\a', '\x16', '\x2', '\x2', 
		'\x8E', '\x8F', '\x5', '\f', '\a', '\x2', '\x8F', '\x90', '\b', '\b', 
		'\x1', '\x2', '\x90', '\x97', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x5', '\f', '\a', '\x2', '\x92', '\x93', '\a', '\x17', '\x2', '\x2', 
		'\x93', '\x94', '\x5', '\f', '\a', '\x2', '\x94', '\x95', '\b', '\b', 
		'\x1', '\x2', '\x95', '\x97', '\x3', '\x2', '\x2', '\x2', '\x96', 't', 
		'\x3', '\x2', '\x2', '\x2', '\x96', 'v', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'x', '\x3', '\x2', '\x2', '\x2', '\x96', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x82', '\x3', '\x2', '\x2', '\x2', '\x96', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x96', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\x5', '\xE', '\b', '\x2', '\x99', '\x9A', '\b', '\t', 
		'\x1', '\x2', '\x9A', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', 
		'\x5', '\xE', '\b', '\x2', '\x9C', '\x9D', '\a', '\x11', '\x2', '\x2', 
		'\x9D', '\x9E', '\x5', '\x10', '\t', '\x2', '\x9E', '\x9F', '\b', '\t', 
		'\x1', '\x2', '\x9F', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\x5', '\xE', '\b', '\x2', '\xA1', '\xA2', '\a', '\x10', '\x2', '\x2', 
		'\xA2', '\xA3', '\x5', '\x10', '\t', '\x2', '\xA3', '\xA4', '\b', '\t', 
		'\x1', '\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\x5', '\x10', '\t', '\x2', '\xA8', '\xA9', 
		'\b', '\n', '\x1', '\x2', '\xA9', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAB', '\a', '\x1E', '\x2', '\x2', '\xAB', '\xAC', '\a', '\a', 
		'\x2', '\x2', '\xAC', '\xAD', '\x5', '\x12', '\n', '\x2', '\xAD', '\xAE', 
		'\b', '\n', '\x1', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', 
		'\a', '\x4', '\x2', '\x2', '\xB2', '\xB3', '\a', '\x1E', '\x2', '\x2', 
		'\xB3', '\xB6', '\b', '\v', '\x1', '\x2', '\xB4', '\xB5', '\a', '\a', 
		'\x2', '\x2', '\xB5', '\xB7', '\x5', '\f', '\a', '\x2', '\xB6', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xCA', '\b', '\v', 
		'\x1', '\x2', '\xB9', '\xBA', '\a', '\x5', '\x2', '\x2', '\xBA', '\xBB', 
		'\a', '\x1E', '\x2', '\x2', '\xBB', '\xBE', '\b', '\v', '\x1', '\x2', 
		'\xBC', '\xBD', '\a', '\a', '\x2', '\x2', '\xBD', '\xBF', '\x5', '\f', 
		'\a', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xCA', '\b', '\v', '\x1', '\x2', '\xC1', '\xC2', '\a', '\x6', 
		'\x2', '\x2', '\xC2', '\xC3', '\a', '\x1E', '\x2', '\x2', '\xC3', '\xC6', 
		'\b', '\v', '\x1', '\x2', '\xC4', '\xC5', '\a', '\a', '\x2', '\x2', '\xC5', 
		'\xC7', '\x5', '\x12', '\n', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xCA', '\b', '\v', '\x1', '\x2', '\xC9', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x1B', '!', '.', '>', '@', 'Q', 'S', 'r', 
		'\x96', '\xA5', '\xAF', '\xB6', '\xBE', '\xC6', '\xC9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
