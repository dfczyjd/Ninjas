//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NinjaVars.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class NinjaVarsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPSEP=1, INTKEY=2, DOUBLEKEY=3, BOOLKEY=4, ASSIGN=5, ADD=6, SUB=7, MUL=8, 
		DIV=9, ADDASSIGN=10, SUBASSIGN=11, MULASSIGN=12, DIVASSIGN=13, AND=14, 
		OR=15, XOR=16, ANDASSIGN=17, ORASSIGN=18, XORASSIGN=19, LPAREN=20, RPAREN=21, 
		WS=22, BOOL=23, DOUBLE=24, INT=25, ID=26;
	public const int
		RULE_program = 0, RULE_operation = 1, RULE_intOperand = 2, RULE_intTerm = 3, 
		RULE_intExpr = 4, RULE_intExprEx = 5, RULE_doubleOperand = 6, RULE_doubleTerm = 7, 
		RULE_doubleExpr = 8, RULE_doubleExprEx = 9, RULE_boolOperand = 10, RULE_boolExpr = 11, 
		RULE_boolExprEx = 12, RULE_declare = 13;
	public static readonly string[] ruleNames = {
		"program", "operation", "intOperand", "intTerm", "intExpr", "intExprEx", 
		"doubleOperand", "doubleTerm", "doubleExpr", "doubleExprEx", "boolOperand", 
		"boolExpr", "boolExprEx", "declare"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", "'int'", "'double'", "'bool'", "'='", "'+'", "'-'", "'*'", 
		"'/'", "'+='", "'-='", "'*='", "'/='", "'&&'", "'||'", "'^'", "'&&='", 
		"'||='", "'^='", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPSEP", "INTKEY", "DOUBLEKEY", "BOOLKEY", "ASSIGN", "ADD", "SUB", 
		"MUL", "DIV", "ADDASSIGN", "SUBASSIGN", "MULASSIGN", "DIVASSIGN", "AND", 
		"OR", "XOR", "ANDASSIGN", "ORASSIGN", "XORASSIGN", "LPAREN", "RPAREN", 
		"WS", "BOOL", "DOUBLE", "INT", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NinjaVars.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NinjaVarsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    public class VarData
	    {
	        public enum VarType
	        {
	            Int, Double, Bool
	        };

	        public VarType type;
	        public dynamic value;
	    }
	 
	    public static Dictionary<string, VarData> varTable = new Dictionary<string, VarData>();

		public NinjaVarsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NinjaVarsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode[] OPSEP() { return GetTokens(NinjaVarsParser.OPSEP); }
		public ITerminalNode OPSEP(int i) {
			return GetToken(NinjaVarsParser.OPSEP, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << LPAREN) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << ID))) != 0)) {
				{
				{
				State = 28; operation();
				State = 29; Match(OPSEP);
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public IntExprExContext intExprEx() {
			return GetRuleContext<IntExprExContext>(0);
		}
		public DoubleExprExContext doubleExprEx() {
			return GetRuleContext<DoubleExprExContext>(0);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 2, RULE_operation);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; intExprEx();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; doubleExprEx();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; boolExprEx();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39; declare();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntOperandContext : ParserRuleContext {
		public int value;
		public IToken _ID;
		public IntExprExContext _intExprEx;
		public ITerminalNode INT() { return GetToken(NinjaVarsParser.INT, 0); }
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaVarsParser.LPAREN, 0); }
		public IntExprExContext intExprEx() {
			return GetRuleContext<IntExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaVarsParser.RPAREN, 0); }
		public IntOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterIntOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitIntOperand(this);
		}
	}

	[RuleVersion(0)]
	public IntOperandContext intOperand() {
		IntOperandContext _localctx = new IntOperandContext(Context, State);
		EnterRule(_localctx, 4, RULE_intOperand);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; Match(INT);

				            _localctx.value =  1;
				            
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44; _localctx._ID = Match(ID);

				              _localctx.value =  varTable[(_localctx._ID!=null?_localctx._ID.Text:null)].value;
				             
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 46; Match(LPAREN);
				State = 47; _localctx._intExprEx = intExprEx();
				State = 48; Match(RPAREN);

				              _localctx.value =  _localctx._intExprEx.value;
				             
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntTermContext : ParserRuleContext {
		public int value;
		public IntOperandContext _intOperand;
		public IntOperandContext intOperand() {
			return GetRuleContext<IntOperandContext>(0);
		}
		public IntTermContext intTerm() {
			return GetRuleContext<IntTermContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(NinjaVarsParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(NinjaVarsParser.DIV, 0); }
		public IntTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterIntTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitIntTerm(this);
		}
	}

	[RuleVersion(0)]
	public IntTermContext intTerm() {
		return intTerm(0);
	}

	private IntTermContext intTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IntTermContext _localctx = new IntTermContext(Context, _parentState);
		IntTermContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_intTerm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 54; _localctx._intOperand = intOperand();

			           _localctx.value =  _localctx._intOperand.value;
			          
			}
			Context.Stop = TokenStream.LT(-1);
			State = 69;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 67;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new IntTermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_intTerm);
						State = 57;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 58; Match(MUL);
						State = 59; _localctx._intOperand = intOperand();

						                     _localctx.value =  1 * _localctx._intOperand.value;
						                    
						}
						break;
					case 2:
						{
						_localctx = new IntTermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_intTerm);
						State = 62;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 63; Match(DIV);
						State = 64; _localctx._intOperand = intOperand();

						                     _localctx.value =  1 / _localctx._intOperand.value;
						                    
						}
						break;
					}
					} 
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		public int value;
		public IntTermContext _intTerm;
		public IntTermContext intTerm() {
			return GetRuleContext<IntTermContext>(0);
		}
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(NinjaVarsParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(NinjaVarsParser.SUB, 0); }
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitIntExpr(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		return intExpr(0);
	}

	private IntExprContext intExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IntExprContext _localctx = new IntExprContext(Context, _parentState);
		IntExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_intExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 73; _localctx._intTerm = intTerm(0);

			           _localctx.value =  _localctx._intTerm.value;
			          
			}
			Context.Stop = TokenStream.LT(-1);
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 86;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new IntExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_intExpr);
						State = 76;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 77; Match(ADD);
						State = 78; _localctx._intTerm = intTerm(0);

						                     _localctx.value =  1 + _localctx._intTerm.value;
						                    
						}
						break;
					case 2:
						{
						_localctx = new IntExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_intExpr);
						State = 81;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 82; Match(SUB);
						State = 83; _localctx._intTerm = intTerm(0);

						                     _localctx.value =  1 - _localctx._intTerm.value;
						                    
						}
						break;
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IntExprExContext : ParserRuleContext {
		public int value;
		public IntExprContext _intExpr;
		public IToken _ID;
		public IntExprExContext _intExprEx;
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(NinjaVarsParser.ASSIGN, 0); }
		public IntExprExContext intExprEx() {
			return GetRuleContext<IntExprExContext>(0);
		}
		public ITerminalNode ADDASSIGN() { return GetToken(NinjaVarsParser.ADDASSIGN, 0); }
		public ITerminalNode SUBASSIGN() { return GetToken(NinjaVarsParser.SUBASSIGN, 0); }
		public ITerminalNode MULASSIGN() { return GetToken(NinjaVarsParser.MULASSIGN, 0); }
		public ITerminalNode DIVASSIGN() { return GetToken(NinjaVarsParser.DIVASSIGN, 0); }
		public IntExprExContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExprEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterIntExprEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitIntExprEx(this);
		}
	}

	[RuleVersion(0)]
	public IntExprExContext intExprEx() {
		IntExprExContext _localctx = new IntExprExContext(Context, State);
		EnterRule(_localctx, 10, RULE_intExprEx);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; _localctx._intExpr = intExpr(0);

				             _localctx.value =  _localctx._intExpr.value;
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; _localctx._ID = Match(ID);
				State = 95; Match(ASSIGN);
				State = 96; _localctx._intExprEx = intExprEx();

				             VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				             if (data.type != VarData.VarType.Int)
				                Console.WriteLine("Int expected, " + data.type + " given");
				             _localctx.value =  data.value = _localctx._intExprEx.value;
				            
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 99; _localctx._ID = Match(ID);
				State = 100; Match(ADDASSIGN);
				State = 101; _localctx._intExprEx = intExprEx();

				             VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				             if (data.type != VarData.VarType.Int)
				                Console.WriteLine("Int expected, " + data.type + " given");
				             _localctx.value =  data.value += _localctx._intExprEx.value;
				            
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 104; _localctx._ID = Match(ID);
				State = 105; Match(SUBASSIGN);
				State = 106; _localctx._intExprEx = intExprEx();

				             VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				             if (data.type != VarData.VarType.Int)
				                Console.WriteLine("Int expected, " + data.type + " given");
				             _localctx.value =  data.value -= _localctx._intExprEx.value;
				            
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 109; _localctx._ID = Match(ID);
				State = 110; Match(MULASSIGN);
				State = 111; _localctx._intExprEx = intExprEx();

				             VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				             if (data.type != VarData.VarType.Int)
				                Console.WriteLine("Int expected, " + data.type + " given");
				             _localctx.value =  data.value *= _localctx._intExprEx.value;
				            
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 114; _localctx._ID = Match(ID);
				State = 115; Match(DIVASSIGN);
				State = 116; _localctx._intExprEx = intExprEx();

				             VarData data = varTable[(_localctx._ID!=null?_localctx._ID.Text:null)];
				             if (data.type != VarData.VarType.Int)
				                Console.WriteLine("Int expected, " + data.type + " given");
				             _localctx.value =  data.value /= _localctx._intExprEx.value;
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleOperandContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(NinjaVarsParser.DOUBLE, 0); }
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaVarsParser.LPAREN, 0); }
		public DoubleExprExContext doubleExprEx() {
			return GetRuleContext<DoubleExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaVarsParser.RPAREN, 0); }
		public DoubleOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterDoubleOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitDoubleOperand(this);
		}
	}

	[RuleVersion(0)]
	public DoubleOperandContext doubleOperand() {
		DoubleOperandContext _localctx = new DoubleOperandContext(Context, State);
		EnterRule(_localctx, 12, RULE_doubleOperand);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; Match(DOUBLE);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; Match(ID);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123; Match(LPAREN);
				State = 124; doubleExprEx();
				State = 125; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleTermContext : ParserRuleContext {
		public DoubleOperandContext doubleOperand() {
			return GetRuleContext<DoubleOperandContext>(0);
		}
		public DoubleTermContext doubleTerm() {
			return GetRuleContext<DoubleTermContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(NinjaVarsParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(NinjaVarsParser.DIV, 0); }
		public DoubleTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterDoubleTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitDoubleTerm(this);
		}
	}

	[RuleVersion(0)]
	public DoubleTermContext doubleTerm() {
		return doubleTerm(0);
	}

	private DoubleTermContext doubleTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DoubleTermContext _localctx = new DoubleTermContext(Context, _parentState);
		DoubleTermContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_doubleTerm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 130; doubleOperand();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 138;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new DoubleTermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_doubleTerm);
						State = 132;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 133; Match(MUL);
						State = 134; doubleOperand();
						}
						break;
					case 2:
						{
						_localctx = new DoubleTermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_doubleTerm);
						State = 135;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 136; Match(DIV);
						State = 137; doubleOperand();
						}
						break;
					}
					} 
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DoubleExprContext : ParserRuleContext {
		public DoubleTermContext doubleTerm() {
			return GetRuleContext<DoubleTermContext>(0);
		}
		public DoubleExprContext doubleExpr() {
			return GetRuleContext<DoubleExprContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(NinjaVarsParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(NinjaVarsParser.SUB, 0); }
		public DoubleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterDoubleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitDoubleExpr(this);
		}
	}

	[RuleVersion(0)]
	public DoubleExprContext doubleExpr() {
		return doubleExpr(0);
	}

	private DoubleExprContext doubleExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DoubleExprContext _localctx = new DoubleExprContext(Context, _parentState);
		DoubleExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_doubleExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 144; doubleTerm(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 152;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new DoubleExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_doubleExpr);
						State = 146;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 147; Match(ADD);
						State = 148; doubleTerm(0);
						}
						break;
					case 2:
						{
						_localctx = new DoubleExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_doubleExpr);
						State = 149;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 150; Match(SUB);
						State = 151; doubleTerm(0);
						}
						break;
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DoubleExprExContext : ParserRuleContext {
		public DoubleExprContext doubleExpr() {
			return GetRuleContext<DoubleExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(NinjaVarsParser.ASSIGN, 0); }
		public DoubleExprExContext doubleExprEx() {
			return GetRuleContext<DoubleExprExContext>(0);
		}
		public ITerminalNode ADDASSIGN() { return GetToken(NinjaVarsParser.ADDASSIGN, 0); }
		public ITerminalNode SUBASSIGN() { return GetToken(NinjaVarsParser.SUBASSIGN, 0); }
		public ITerminalNode MULASSIGN() { return GetToken(NinjaVarsParser.MULASSIGN, 0); }
		public ITerminalNode DIVASSIGN() { return GetToken(NinjaVarsParser.DIVASSIGN, 0); }
		public DoubleExprExContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleExprEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterDoubleExprEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitDoubleExprEx(this);
		}
	}

	[RuleVersion(0)]
	public DoubleExprExContext doubleExprEx() {
		DoubleExprExContext _localctx = new DoubleExprExContext(Context, State);
		EnterRule(_localctx, 18, RULE_doubleExprEx);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; doubleExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; Match(ID);
				State = 159; Match(ASSIGN);
				State = 160; doubleExprEx();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161; Match(ID);
				State = 162; Match(ADDASSIGN);
				State = 163; doubleExprEx();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 164; Match(ID);
				State = 165; Match(SUBASSIGN);
				State = 166; doubleExprEx();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167; Match(ID);
				State = 168; Match(MULASSIGN);
				State = 169; doubleExprEx();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 170; Match(ID);
				State = 171; Match(DIVASSIGN);
				State = 172; doubleExprEx();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOperandContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(NinjaVarsParser.BOOL, 0); }
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaVarsParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaVarsParser.RPAREN, 0); }
		public BoolOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterBoolOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitBoolOperand(this);
		}
	}

	[RuleVersion(0)]
	public BoolOperandContext boolOperand() {
		BoolOperandContext _localctx = new BoolOperandContext(Context, State);
		EnterRule(_localctx, 20, RULE_boolOperand);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; Match(BOOL);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176; Match(ID);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177; Match(LPAREN);
				State = 178; boolExprEx();
				State = 179; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		public BoolOperandContext boolOperand() {
			return GetRuleContext<BoolOperandContext>(0);
		}
		public ITerminalNode OR() { return GetToken(NinjaVarsParser.OR, 0); }
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ITerminalNode AND() { return GetToken(NinjaVarsParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(NinjaVarsParser.XOR, 0); }
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitBoolExpr(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		BoolExprContext _localctx = new BoolExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_boolExpr);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; boolOperand();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; boolOperand();
				State = 185; Match(OR);
				State = 186; boolExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188; boolOperand();
				State = 189; Match(AND);
				State = 190; boolExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; boolOperand();
				State = 193; Match(XOR);
				State = 194; boolExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprExContext : ParserRuleContext {
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(NinjaVarsParser.ASSIGN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode ANDASSIGN() { return GetToken(NinjaVarsParser.ANDASSIGN, 0); }
		public ITerminalNode ORASSIGN() { return GetToken(NinjaVarsParser.ORASSIGN, 0); }
		public ITerminalNode XORASSIGN() { return GetToken(NinjaVarsParser.XORASSIGN, 0); }
		public BoolExprExContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExprEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterBoolExprEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitBoolExprEx(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprExContext boolExprEx() {
		BoolExprExContext _localctx = new BoolExprExContext(Context, State);
		EnterRule(_localctx, 24, RULE_boolExprEx);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; boolExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(ID);
				State = 200; Match(ASSIGN);
				State = 201; boolExprEx();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 202; Match(ID);
				State = 203; Match(ANDASSIGN);
				State = 204; boolExprEx();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 205; Match(ID);
				State = 206; Match(ORASSIGN);
				State = 207; boolExprEx();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 208; Match(ID);
				State = 209; Match(XORASSIGN);
				State = 210; boolExprEx();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public IToken _ID;
		public IntExprExContext _intExprEx;
		public ITerminalNode INTKEY() { return GetToken(NinjaVarsParser.INTKEY, 0); }
		public ITerminalNode ID() { return GetToken(NinjaVarsParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(NinjaVarsParser.ASSIGN, 0); }
		public IntExprExContext intExprEx() {
			return GetRuleContext<IntExprExContext>(0);
		}
		public ITerminalNode DOUBLEKEY() { return GetToken(NinjaVarsParser.DOUBLEKEY, 0); }
		public DoubleExprExContext doubleExprEx() {
			return GetRuleContext<DoubleExprExContext>(0);
		}
		public ITerminalNode BOOLKEY() { return GetToken(NinjaVarsParser.BOOLKEY, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaVarsListener typedListener = listener as INinjaVarsListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 26, RULE_declare);
		int _la;
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTKEY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; Match(INTKEY);
				State = 214; _localctx._ID = Match(ID);

				           VarData newVar = new VarData
				           {
				                type = VarData.VarType.Int,
				                value = 0
				           };
				           varTable.Add((_localctx._ID!=null?_localctx._ID.Text:null), newVar);
				           Console.WriteLine("Create var " + (_localctx._ID!=null?_localctx._ID.Text:null));
				          
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 216; Match(ASSIGN);
					State = 217; _localctx._intExprEx = intExprEx();
					}
				}


				           if ((_localctx._intExprEx!=null?TokenStream.GetText(_localctx._intExprEx.Start,_localctx._intExprEx.Stop):null) != null)
				           {
				                varTable[(_localctx._ID!=null?_localctx._ID.Text:null)].value = _localctx._intExprEx.value;
				                Console.WriteLine("\tAssigning it value of " + (_localctx._intExprEx!=null?TokenStream.GetText(_localctx._intExprEx.Start,_localctx._intExprEx.Stop):null));                
				           }
				           
				}
				break;
			case DOUBLEKEY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; Match(DOUBLEKEY);
				State = 222; _localctx._ID = Match(ID);

				           VarData newVar = new VarData
				           {
				                type = VarData.VarType.Double,
				                value = 0
				           };
				           varTable.Add((_localctx._ID!=null?_localctx._ID.Text:null), newVar);
				           Console.WriteLine("Create var " + (_localctx._ID!=null?_localctx._ID.Text:null));
				          
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 224; Match(ASSIGN);
					State = 225; doubleExprEx();
					}
				}

				}
				break;
			case BOOLKEY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228; Match(BOOLKEY);
				State = 229; Match(ID);
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 230; Match(ASSIGN);
					State = 231; boolExprEx();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return intTerm_sempred((IntTermContext)_localctx, predIndex);
		case 4: return intExpr_sempred((IntExprContext)_localctx, predIndex);
		case 7: return doubleTerm_sempred((DoubleTermContext)_localctx, predIndex);
		case 8: return doubleExpr_sempred((DoubleExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool intTerm_sempred(IntTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool intExpr_sempred(IntExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool doubleTerm_sempred(DoubleTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool doubleExpr_sempred(DoubleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', '\xEF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\"', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '%', '\v', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '+', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x36', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x46', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', 'I', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', 'Y', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\\', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'z', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x82', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\x8D', '\n', '\t', '\f', '\t', '\xE', '\t', '\x90', '\v', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x9B', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x9E', '\v', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB0', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\xB8', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xC7', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xD6', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xDD', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xE5', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xEB', '\n', '\xF', 
		'\x5', '\xF', '\xED', '\n', '\xF', '\x3', '\xF', '\x2', '\x6', '\b', '\n', 
		'\x10', '\x12', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x2', 
		'\x2', '\x108', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x4', '*', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x35', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\n', 'J', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'y', '\x3', '\x2', '\x2', '\x2', '\xE', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x83', '\x3', '\x2', '\x2', '\x2', '\x12', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\x18', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\x4', '\x3', '\x2', '\x1F', 
		' ', '\a', '\x3', '\x2', '\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1E', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', 
		'\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x3', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', 
		'\x2', '\x2', '&', '+', '\x5', '\f', '\a', '\x2', '\'', '+', '\x5', '\x14', 
		'\v', '\x2', '(', '+', '\x5', '\x1A', '\xE', '\x2', ')', '+', '\x5', '\x1C', 
		'\xF', '\x2', '*', '&', '\x3', '\x2', '\x2', '\x2', '*', '\'', '\x3', 
		'\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '*', ')', '\x3', 
		'\x2', '\x2', '\x2', '+', '\x5', '\x3', '\x2', '\x2', '\x2', ',', '-', 
		'\a', '\x1B', '\x2', '\x2', '-', '\x36', '\b', '\x4', '\x1', '\x2', '.', 
		'/', '\a', '\x1C', '\x2', '\x2', '/', '\x36', '\b', '\x4', '\x1', '\x2', 
		'\x30', '\x31', '\a', '\x16', '\x2', '\x2', '\x31', '\x32', '\x5', '\f', 
		'\a', '\x2', '\x32', '\x33', '\a', '\x17', '\x2', '\x2', '\x33', '\x34', 
		'\b', '\x4', '\x1', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x35', ',', '\x3', '\x2', '\x2', '\x2', '\x35', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x30', '\x3', '\x2', '\x2', '\x2', '\x36', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\b', '\x5', '\x1', '\x2', '\x38', 
		'\x39', '\x5', '\x6', '\x4', '\x2', '\x39', ':', '\b', '\x5', '\x1', '\x2', 
		':', 'G', '\x3', '\x2', '\x2', '\x2', ';', '<', '\f', '\x4', '\x2', '\x2', 
		'<', '=', '\a', '\n', '\x2', '\x2', '=', '>', '\x5', '\x6', '\x4', '\x2', 
		'>', '?', '\b', '\x5', '\x1', '\x2', '?', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\f', '\x3', '\x2', '\x2', '\x41', '\x42', '\a', '\v', 
		'\x2', '\x2', '\x42', '\x43', '\x5', '\x6', '\x4', '\x2', '\x43', '\x44', 
		'\b', '\x5', '\x1', '\x2', '\x44', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x45', ';', '\x3', '\x2', '\x2', '\x2', '\x45', '@', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\b', 
		'\x6', '\x1', '\x2', 'K', 'L', '\x5', '\b', '\x5', '\x2', 'L', 'M', '\b', 
		'\x6', '\x1', '\x2', 'M', 'Z', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\f', 
		'\x4', '\x2', '\x2', 'O', 'P', '\a', '\b', '\x2', '\x2', 'P', 'Q', '\x5', 
		'\b', '\x5', '\x2', 'Q', 'R', '\b', '\x6', '\x1', '\x2', 'R', 'Y', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'T', '\f', '\x3', '\x2', '\x2', 'T', 'U', '\a', 
		'\t', '\x2', '\x2', 'U', 'V', '\x5', '\b', '\x5', '\x2', 'V', 'W', '\b', 
		'\x6', '\x1', '\x2', 'W', 'Y', '\x3', '\x2', '\x2', '\x2', 'X', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'S', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', 
		'\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', 
		'[', '\x3', '\x2', '\x2', '\x2', '[', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x5', '\n', '\x6', '\x2', 
		'^', '_', '\b', '\a', '\x1', '\x2', '_', 'z', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61', '\a', '\x1C', '\x2', '\x2', '\x61', '\x62', '\a', '\a', '\x2', 
		'\x2', '\x62', '\x63', '\x5', '\f', '\a', '\x2', '\x63', '\x64', '\b', 
		'\a', '\x1', '\x2', '\x64', 'z', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\x1C', '\x2', '\x2', '\x66', 'g', '\a', '\f', '\x2', '\x2', 'g', 
		'h', '\x5', '\f', '\a', '\x2', 'h', 'i', '\b', '\a', '\x1', '\x2', 'i', 
		'z', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\x1C', '\x2', '\x2', 
		'k', 'l', '\a', '\r', '\x2', '\x2', 'l', 'm', '\x5', '\f', '\a', '\x2', 
		'm', 'n', '\b', '\a', '\x1', '\x2', 'n', 'z', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\a', '\x1C', '\x2', '\x2', 'p', 'q', '\a', '\xE', '\x2', '\x2', 
		'q', 'r', '\x5', '\f', '\a', '\x2', 'r', 's', '\b', '\a', '\x1', '\x2', 
		's', 'z', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\x1C', '\x2', '\x2', 
		'u', 'v', '\a', '\xF', '\x2', '\x2', 'v', 'w', '\x5', '\f', '\a', '\x2', 
		'w', 'x', '\b', '\a', '\x1', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 
		'y', ']', '\x3', '\x2', '\x2', '\x2', 'y', '`', '\x3', '\x2', '\x2', '\x2', 
		'y', '\x65', '\x3', '\x2', '\x2', '\x2', 'y', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'o', '\x3', '\x2', '\x2', '\x2', 'y', 't', '\x3', '\x2', '\x2', 
		'\x2', 'z', '\r', '\x3', '\x2', '\x2', '\x2', '{', '\x82', '\a', '\x1A', 
		'\x2', '\x2', '|', '\x82', '\a', '\x1C', '\x2', '\x2', '}', '~', '\a', 
		'\x16', '\x2', '\x2', '~', '\x7F', '\x5', '\x14', '\v', '\x2', '\x7F', 
		'\x80', '\a', '\x17', '\x2', '\x2', '\x80', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '{', '\x3', '\x2', '\x2', '\x2', '\x81', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '}', '\x3', '\x2', '\x2', '\x2', '\x82', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\b', '\t', '\x1', '\x2', 
		'\x84', '\x85', '\x5', '\xE', '\b', '\x2', '\x85', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x87', '\f', '\x4', '\x2', '\x2', '\x87', '\x88', 
		'\a', '\n', '\x2', '\x2', '\x88', '\x8D', '\x5', '\xE', '\b', '\x2', '\x89', 
		'\x8A', '\f', '\x3', '\x2', '\x2', '\x8A', '\x8B', '\a', '\v', '\x2', 
		'\x2', '\x8B', '\x8D', '\x5', '\xE', '\b', '\x2', '\x8C', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\b', '\n', '\x1', '\x2', '\x92', '\x93', '\x5', '\x10', '\t', 
		'\x2', '\x93', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\f', 
		'\x4', '\x2', '\x2', '\x95', '\x96', '\a', '\b', '\x2', '\x2', '\x96', 
		'\x9B', '\x5', '\x10', '\t', '\x2', '\x97', '\x98', '\f', '\x3', '\x2', 
		'\x2', '\x98', '\x99', '\a', '\t', '\x2', '\x2', '\x99', '\x9B', '\x5', 
		'\x10', '\t', '\x2', '\x9A', '\x94', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xB0', '\x5', '\x12', '\n', 
		'\x2', '\xA0', '\xA1', '\a', '\x1C', '\x2', '\x2', '\xA1', '\xA2', '\a', 
		'\a', '\x2', '\x2', '\xA2', '\xB0', '\x5', '\x14', '\v', '\x2', '\xA3', 
		'\xA4', '\a', '\x1C', '\x2', '\x2', '\xA4', '\xA5', '\a', '\f', '\x2', 
		'\x2', '\xA5', '\xB0', '\x5', '\x14', '\v', '\x2', '\xA6', '\xA7', '\a', 
		'\x1C', '\x2', '\x2', '\xA7', '\xA8', '\a', '\r', '\x2', '\x2', '\xA8', 
		'\xB0', '\x5', '\x14', '\v', '\x2', '\xA9', '\xAA', '\a', '\x1C', '\x2', 
		'\x2', '\xAA', '\xAB', '\a', '\xE', '\x2', '\x2', '\xAB', '\xB0', '\x5', 
		'\x14', '\v', '\x2', '\xAC', '\xAD', '\a', '\x1C', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\xF', '\x2', '\x2', '\xAE', '\xB0', '\x5', '\x14', '\v', 
		'\x2', '\xAF', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB8', '\a', '\x19', '\x2', '\x2', '\xB2', 
		'\xB8', '\a', '\x1C', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x16', '\x2', 
		'\x2', '\xB4', '\xB5', '\x5', '\x1A', '\xE', '\x2', '\xB5', '\xB6', '\a', 
		'\x17', '\x2', '\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xC7', '\x5', '\x16', '\f', '\x2', '\xBA', 
		'\xBB', '\x5', '\x16', '\f', '\x2', '\xBB', '\xBC', '\a', '\x11', '\x2', 
		'\x2', '\xBC', '\xBD', '\x5', '\x18', '\r', '\x2', '\xBD', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\x5', '\x16', '\f', '\x2', '\xBF', 
		'\xC0', '\a', '\x10', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\x18', '\r', 
		'\x2', '\xC1', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x5', 
		'\x16', '\f', '\x2', '\xC3', '\xC4', '\a', '\x12', '\x2', '\x2', '\xC4', 
		'\xC5', '\x5', '\x18', '\r', '\x2', '\xC5', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC7', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xD6', '\x5', '\x18', '\r', '\x2', '\xC9', '\xCA', '\a', 
		'\x1C', '\x2', '\x2', '\xCA', '\xCB', '\a', '\a', '\x2', '\x2', '\xCB', 
		'\xD6', '\x5', '\x1A', '\xE', '\x2', '\xCC', '\xCD', '\a', '\x1C', '\x2', 
		'\x2', '\xCD', '\xCE', '\a', '\x13', '\x2', '\x2', '\xCE', '\xD6', '\x5', 
		'\x1A', '\xE', '\x2', '\xCF', '\xD0', '\a', '\x1C', '\x2', '\x2', '\xD0', 
		'\xD1', '\a', '\x14', '\x2', '\x2', '\xD1', '\xD6', '\x5', '\x1A', '\xE', 
		'\x2', '\xD2', '\xD3', '\a', '\x1C', '\x2', '\x2', '\xD3', '\xD4', '\a', 
		'\x15', '\x2', '\x2', '\xD4', '\xD6', '\x5', '\x1A', '\xE', '\x2', '\xD5', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x4', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '\x1C', '\x2', '\x2', '\xD9', '\xDC', '\b', 
		'\xF', '\x1', '\x2', '\xDA', '\xDB', '\a', '\a', '\x2', '\x2', '\xDB', 
		'\xDD', '\x5', '\f', '\a', '\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xED', '\b', '\xF', '\x1', '\x2', '\xDF', 
		'\xE0', '\a', '\x5', '\x2', '\x2', '\xE0', '\xE1', '\a', '\x1C', '\x2', 
		'\x2', '\xE1', '\xE4', '\b', '\xF', '\x1', '\x2', '\xE2', '\xE3', '\a', 
		'\a', '\x2', '\x2', '\xE3', '\xE5', '\x5', '\x14', '\v', '\x2', '\xE4', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xED', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', 
		'\x6', '\x2', '\x2', '\xE7', '\xEA', '\a', '\x1C', '\x2', '\x2', '\xE8', 
		'\xE9', '\a', '\a', '\x2', '\x2', '\xE9', '\xEB', '\x5', '\x1A', '\xE', 
		'\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xED', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '#', '*', '\x35', '\x45', 'G', 'X', 'Z', 
		'y', '\x81', '\x8C', '\x8E', '\x9A', '\x9C', '\xAF', '\xB7', '\xC6', '\xD5', 
		'\xDC', '\xE4', '\xEA', '\xEC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
