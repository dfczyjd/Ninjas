//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NinjaVars.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="INinjaVarsListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class NinjaVarsBaseListener : INinjaVarsListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] NinjaVarsParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] NinjaVarsParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperation([NotNull] NinjaVarsParser.OperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.operation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperation([NotNull] NinjaVarsParser.OperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.intOperand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntOperand([NotNull] NinjaVarsParser.IntOperandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.intOperand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntOperand([NotNull] NinjaVarsParser.IntOperandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.intTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntTerm([NotNull] NinjaVarsParser.IntTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.intTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntTerm([NotNull] NinjaVarsParser.IntTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.intExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntExpr([NotNull] NinjaVarsParser.IntExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.intExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntExpr([NotNull] NinjaVarsParser.IntExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.intExprEx"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntExprEx([NotNull] NinjaVarsParser.IntExprExContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.intExprEx"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntExprEx([NotNull] NinjaVarsParser.IntExprExContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.doubleOperand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoubleOperand([NotNull] NinjaVarsParser.DoubleOperandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.doubleOperand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoubleOperand([NotNull] NinjaVarsParser.DoubleOperandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.doubleTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoubleTerm([NotNull] NinjaVarsParser.DoubleTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.doubleTerm"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoubleTerm([NotNull] NinjaVarsParser.DoubleTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.doubleExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoubleExpr([NotNull] NinjaVarsParser.DoubleExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.doubleExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoubleExpr([NotNull] NinjaVarsParser.DoubleExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.doubleExprEx"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDoubleExprEx([NotNull] NinjaVarsParser.DoubleExprExContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.doubleExprEx"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDoubleExprEx([NotNull] NinjaVarsParser.DoubleExprExContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.boolOperand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolOperand([NotNull] NinjaVarsParser.BoolOperandContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.boolOperand"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolOperand([NotNull] NinjaVarsParser.BoolOperandContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.boolExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolExpr([NotNull] NinjaVarsParser.BoolExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.boolExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolExpr([NotNull] NinjaVarsParser.BoolExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.boolExprEx"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolExprEx([NotNull] NinjaVarsParser.BoolExprExContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.boolExprEx"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolExprEx([NotNull] NinjaVarsParser.BoolExprExContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="NinjaVarsParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclare([NotNull] NinjaVarsParser.DeclareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="NinjaVarsParser.declare"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclare([NotNull] NinjaVarsParser.DeclareContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
