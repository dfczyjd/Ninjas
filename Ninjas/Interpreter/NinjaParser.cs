//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\..\..\Interpreter\Ninja.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


	#if NOGUI
    	using Interpreter;
    #endif

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class NinjaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		SEMICOLON=10, INTKEY=11, DOUBLEKEY=12, BOOLKEY=13, WHILE=14, FOR=15, DO=16, 
		IF=17, ELSE=18, SIN=19, COS=20, TAN=21, ASIN=22, ACOS=23, ATAN=24, ATAN2=25, 
		ADD=26, SUB=27, MUL=28, DIV=29, MOD=30, POW=31, INC=32, DEC=33, ASSIGN=34, 
		ADDASSIGN=35, SUBASSIGN=36, MULASSIGN=37, DIVASSIGN=38, MODASSIGN=39, 
		POWASSIGN=40, AND=41, OR=42, NOT=43, LESS=44, GREATER=45, EQUAL=46, NOTEQUAL=47, 
		LESSEQUAL=48, GREQUAL=49, WS=50, BOOL=51, DOUBLE=52, INT=53, RETURN_KEYWORD=54, 
		PASS=55, MAIN=56, FUN_KEYWORD=57, VOID=58, COMMA=59, OBRACE=60, CBRACE=61, 
		LPAREN=62, RPAREN=63, COMMENT=64, STRING=65, ID=66;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_main_signature = 2, RULE_function = 3, 
		RULE_v_function = 4, RULE_v_fun_signature = 5, RULE_m_function = 6, RULE_m_fun_signature = 7, 
		RULE_code = 8, RULE_main_code = 9, RULE_operation = 10, RULE_method_return = 11, 
		RULE_params = 12, RULE_var_signature = 13, RULE_builtin_func_state = 14, 
		RULE_builtin_func_p = 15, RULE_builtin_func_e = 16, RULE_call = 17, RULE_parameterized_call = 18, 
		RULE_simple_call = 19, RULE_custom_call = 20, RULE_call_params = 21, RULE_val_or_id = 22, 
		RULE_myif = 23, RULE_myif_short = 24, RULE_mywhile = 25, RULE_mydo_while = 26, 
		RULE_myfor = 27, RULE_ariphOperand = 28, RULE_ariphTerm = 29, RULE_ariphExpr = 30, 
		RULE_ariphExprEx = 31, RULE_boolOperand = 32, RULE_boolExpr = 33, RULE_boolExprEx = 34, 
		RULE_declare = 35, RULE_ariphID = 36, RULE_trig = 37, RULE_trig2 = 38, 
		RULE_meaningfulType = 39;
	public static readonly string[] ruleNames = {
		"program", "main", "main_signature", "function", "v_function", "v_fun_signature", 
		"m_function", "m_fun_signature", "code", "main_code", "operation", "method_return", 
		"params", "var_signature", "builtin_func_state", "builtin_func_p", "builtin_func_e", 
		"call", "parameterized_call", "simple_call", "custom_call", "call_params", 
		"val_or_id", "myif", "myif_short", "mywhile", "mydo_while", "myfor", "ariphOperand", 
		"ariphTerm", "ariphExpr", "ariphExprEx", "boolOperand", "boolExpr", "boolExprEx", 
		"declare", "ariphID", "trig", "trig2", "meaningfulType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'getSelfId'", "'getPositionX'", "'getPositionY'", "'getDirection'", 
		"'getHealth'", "'move'", "'turn'", "'hit'", "'shoot'", "';'", "'int'", 
		"'double'", "'bool'", "'while'", "'for'", "'do'", "'if'", "'else'", "'sin'", 
		"'cos'", "'tan'", "'asin'", "'acos'", "'atan'", "'atan2'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'**'", "'++'", "'--'", "'='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'**='", "'&&'", "'||'", "'!'", "'<'", "'>'", "'=='", 
		"'!='", "'<='", "'>='", null, null, null, null, "'return'", "'pass'", 
		"'main'", "'fun'", "'void'", "','", "'{'", "'}'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "SEMICOLON", 
		"INTKEY", "DOUBLEKEY", "BOOLKEY", "WHILE", "FOR", "DO", "IF", "ELSE", 
		"SIN", "COS", "TAN", "ASIN", "ACOS", "ATAN", "ATAN2", "ADD", "SUB", "MUL", 
		"DIV", "MOD", "POW", "INC", "DEC", "ASSIGN", "ADDASSIGN", "SUBASSIGN", 
		"MULASSIGN", "DIVASSIGN", "MODASSIGN", "POWASSIGN", "AND", "OR", "NOT", 
		"LESS", "GREATER", "EQUAL", "NOTEQUAL", "LESSEQUAL", "GREQUAL", "WS", 
		"BOOL", "DOUBLE", "INT", "RETURN_KEYWORD", "PASS", "MAIN", "FUN_KEYWORD", 
		"VOID", "COMMA", "OBRACE", "CBRACE", "LPAREN", "RPAREN", "COMMENT", "STRING", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ninja.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NinjaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}



		public RealInterpreter owner;
	    public int id;
	    public int[] health = new int[4];
	    public double[] xPos = new double[4];
	    public double[] yPos = new double[4];
	    public double[] dirs = new double[4];

	    public void Sleep()
	    {
	        int tmp = 0;
	        Main.Log("#" + id + " entered pause");
	        Main.mre[id].Reset();
	        Main.mre[id].WaitOne();
	        Main.Log("#" + id + " left pause");
	    }


		public enum ParamType
		{
			Receive, Pass
		};

		public enum CallType
		{
			BuiltIn, Custom
		};
		
		public enum VarType
	    {
	    	Int, Double, Bool
	    };
	    
	    public enum ReturnType
	    {
	    	Int, Double, Bool, Void
	    };

		public class ParamData
		{
			
	        public string name;
	        
	        public dynamic value;
		
			public VarType type;	
			
			public ParamType paramType = ParamType.Receive;	
		
			public override string ToString()
	        {
	            return $"param {type} {name}";
	        }
		}
		
		public class VarData
	    {
	        public string name;
	        public VarType type;
	        
	        
	        public dynamic value
	        {
	        	get 
	        	{
	        		if (isAssigned)
	        			return rval;
	        		throw new Exception($"Cannot get value, Variable \"{name}\" is not initialized!");	
	        	}
	        	
	        	set
	        	{
	        		isAssigned = true;
	        		rval = value;
	        	}
	        }
	        
	        private dynamic rval;
	        public bool isAssigned {get; private set;}
	    }

	    public class MethodData : Block
	    {
			public bool isMeaningful;
	        public ReturnType returnType = ReturnType.Void;
	        public ArrayList<NinjaParser.ParamData> paramList = new ArrayList<NinjaParser.ParamData>();
	        
			public dynamic returnValue;
			
			public MethodData(NinjaParser parser) : base(parser)
	        	        {
	        	        }
			
			public override void Eval()
	        {
	        	parser.curBlock = this;
	        	Debug($"===Entering fun {name} with params {ParamListToString(paramList)}");
				Debug($"Method {name} contains:");
	            foreach (var sm in operations)
	            {
	                Debug(sm.ToString());
	            }
	            Debug($"End of method {name} block");
	            foreach(var sm in operations)
	            {
	            	if(sm.GetType().IsSubclassOf(typeof(OperationClass)))
	            		sm.Eval();
	            }
	            
	            Debug($"---Vars of block met {name} ----");	
	            foreach (var elem in varTable)
	            {
	            	if (elem.Value.isAssigned)
	                	Debug("\t" + elem.Key + " is " + elem.Value.type + " with value " + elem.Value.value);
	                else
	                	Debug("\t" + elem.Key + " is " + elem.Value.type + ", value not assigned");
	            }
	            Debug($"---End Vars of block met {name} ----");
	            Debug($"===Exiting fun {name}");	
	        	
	        }
	        
	        public override string ToString()
	        {
	        	return $"fun {returnType} {name}, params : {paramList} ";
	        }
	    }
	 
	    public Dictionary<string, MethodData> metTable = new Dictionary<string, MethodData>();
	    int depth = 0;
	    string currentMet = "?";
	    
	    static StreamWriter fstream = new StreamWriter("execlog.log");
	   	    
	   	public static void Debug(string line)
	   	{
	   		Console.WriteLine(line);
	   		fstream.WriteLine(line);
	   	    fstream.Flush();
	   	}
	   	    
	   	public static void Error(string message)
	   	{
	   	    ConsoleColor curr = Console.ForegroundColor;
	   	    Console.ForegroundColor = ConsoleColor.Red;
	   	    Console.WriteLine(message);
	   	    fstream.WriteLine("ERROR: " + message);
	   	    fstream.Flush();
	   	    Console.ForegroundColor = curr;
	   	}
	    
	    public static bool CheckType(Type t, VarType vt)
	    {
	    	string actualTypeName = t.ToString().ToLower();
	        string expectedTypeName = vt.ToString().ToLower();
	        
	    	if(actualTypeName.Contains("bool") && expectedTypeName.Contains("bool"))
	        	return true;
	        if(actualTypeName.Contains("int") && (expectedTypeName.Contains("int") || expectedTypeName.Contains("double")))
	            return true;
	        if(actualTypeName.Contains("double") && expectedTypeName.Contains("double"))
	            return true;
	        return false;        	
	    }
	    
	    public static bool CheckType(Type t, ReturnType vt)
	        {
	        	string actualTypeName = t.ToString().ToLower();
	        	string expectedTypeName = vt.ToString().ToLower();
	        
	        	if(actualTypeName.Contains("bool") && expectedTypeName.Contains("bool"))
	        		return true;
	        	if(actualTypeName.Contains("int") && (expectedTypeName.Contains("int") || expectedTypeName.Contains("double")))
	                return true;
	            if(actualTypeName.Contains("double") && expectedTypeName.Contains("double"))
	                return true;
	            return false;        	
	        }
		
		public bool CheckParams(NinjaParser.CallData call, NinjaParser.MethodData method)
	    {
	    	if (call.paramList.Count != method.paramList.Count)
	    	{
	    		Error($"Expected params {method.paramList.Count}, found {call.paramList.Count}");
	    		return false;
	    	}
	    
	    	for (int i = 0; i < call.paramList.Count; i++)
	    	{
	    		var r = call.paramList[call.paramList.Count - i - 1].value;//.Eval();		
	    		//if (call.paramList[i].type == method.paramList[i].type)
	    		if (r is string varId){
	    			if (FindVar(varId) != null)
	    				r = FindVar(varId).value;
	    			else
	    			{
	    				Error($"Type mismatch ({i+1}/{call.paramList.Count}) in {call.name}: expected {method.paramList[i].type}, found {r.GetType()} with value {call.paramList[call.paramList.Count - i - 1].value}");
	                    return false;
	    			}
	    		}
	    		if (r is ExprClass)
				{
					if (r.value != null)
					{
						r = r.value;
						call.paramList[call.paramList.Count - i - 1].value = r;
	                }
	                else
					{
						//second call
						Error("Evaluating param (fuck, second evaluation)");
						call.paramList[call.paramList.Count - i - 1].value = r.Eval();
						r = call.paramList[call.paramList.Count - i - 1].value;	
					}
	            }
	    				
	    		if (CheckType(r.GetType(), method.paramList[i].type))
	    		{
	    			method.paramList[i].value = r;
					if (FindVar(method.paramList[i].name, method) == null)
		            {
		                VarData varData = new VarData()
		                {
		                	name = method.paramList[i].name,
							type = method.paramList[i].type
		               	};
		                Debug($"Addung to {method.name}");
		           		method.varTable.Add(varData.name, varData);
		           	}
		    		FindVar(method.paramList[i].name, method).value = r;
	    		}
	    		else
	    		{
	    			Error($"Type mismatch ({i+1}/{call.paramList.Count}) in {call.name}: expected {method.paramList[i].type}, found {r.GetType()} with value {call.paramList[call.paramList.Count - i - 1].value}");
	    			return false;
	    		}
	    	}
	    
	    	return true;
	    }
	            		
		ArrayList<byte> _bytes = new ArrayList<byte>();
		
		static string ParamListToString(ArrayList<NinjaParser.ParamData> list)
	    {
	    	string s = "{";
	    	foreach (var data in list)
	    	{
	    	
	    		if(data.value.GetType() == typeof(ExprClass))
	    			s += $" {data.type} {data.value.Eval()},";
	    		else
	    		{
	    	
	    			if (data.paramType == NinjaParser.ParamType.Pass)
	    			{
		    			s += $" {data.type} {data.value},";	
	    			}
		    		else
	    			{
	    				s += $" {data.type} {data.name} = {data.value},";	
	    			}
	    		
	    		}
	    	}
	    
	    	s = (s.Length > 1 ? s.Substring(0, s.Length - 1) : s) + " }";
	    	return s;
	    }
		
		public class Block
		{
		
			public string name;
		
			public NinjaParser parser;
			
			public Block(NinjaParser parser)
			{
				this.parser = parser;
			}
			
			public List<OperationClass> operations = new List<OperationClass>();
			public Dictionary<string, VarData> varTable = new Dictionary<string, VarData>();
			
			public Block Parent;
			
			public virtual void Eval()
			{
				for (int i = 0; i < operations.Count; ++i)
					operations[i].Eval();
			}
			
			public OperationClass createOperationClass()
			{
				operations.Add(new OperationClass());
				return operations[operations.Count - 1];
			}
			
			public ExprClass ToExpr()
			{
				int lastInd = operations.Count - 1;
				var res = new ExprClass(operations[lastInd]);
				res.parser = parser;
				operations[lastInd] = res;
				return res;
			}
		}
		
		public class CallData : OperationClass
		{
			public string name;
				
			public dynamic value;
				
			public CallType callType;
			
			public ReturnType returnType = ReturnType.Void;
			
			public Block parent;
				
			public ArrayList<NinjaParser.ParamData> paramList = new ArrayList<NinjaParser.ParamData>();
			
			public override dynamic Eval()
			{
				if (callType == NinjaParser.CallType.Custom)
				{
					
					if (parser.metTable.ContainsKey(name) && parser.CheckParams(this, parser.metTable[name]))
					{		
						Debug($"Calling custom method {name} with params {ParamListToString(paramList)}");
	                    						parser.metTable[name].Eval();
	                    						if (returnType != ReturnType.Void && parser.metTable[name].returnType != ReturnType.Void)
	                    						{
	                    							var ret = parser.metTable[name].returnValue.Eval();
	                    							if (!CheckType(ret.GetType(), parser.metTable[name].returnType)){
	                    								throw new Exception($"Actual return is {ret.GetType()}, expected declared return type {parser.metTable[name].returnType}");
	                    							}
	                    							parser.curBlock = parent;
	                    							Debug($"===fun {name} returned {ret}");
	                    							return ret;	
	                    						}
	                    						if (returnType != parser.metTable[name].returnType)
	                    							Error("Method declaration and call have different return types");
	                    						parser.curBlock = parent;
	                    						return null;
					}
				}
				else
				{
					if (parser.metTable.ContainsKey(name))
	                					{
	                						if (parser.CheckParams(this, parser.metTable[name]))
	                						{
	#if !NOGUI
		                						parser.Sleep();
	#endif
	                							dynamic ret = 0;
												Debug($"BUiltin func {name}, param ");
		                                        int reqid = -1;
		                                        if (name != "getSelfId")
		                                        {
			                                    	dynamic param = paramList[0].value;
			                                        if (param.GetType() == typeof(string))
			                                        {
				                                    	reqid = parser.FindVar(param).value;
			                                        }
			                                        else
			                                        {
				                                        reqid = param;
			                                        }
		                                        }
	                							switch (name)
	                							{
	                								case "getSelfId":
	                									ret = parser.id;
	                									break;
	                
	                								case "getHealth":
	                									ret = parser.health[reqid];
	                									break;
	                
	                								case "getPositionX":
	                									ret = parser.xPos[reqid];
	                									break;
	                
	                								case "getPositionY":
	                									ret = parser.yPos[reqid];
	                									break;
	                
	                								case "getDirection":
	                									ret = parser.dirs[reqid];
	                									break;
	                							}
	                							Debug($"Calling builtin method {name} with params {ParamListToString(paramList)}, ret {ret} + of type " + ret.GetType());
	                							Main.Log("Func " + name + " for player #" + reqid + " returning " + ret);
	                							return parser.metTable[name].returnValue = ret;
	                						}
	                					}
	                					else
	                					{
	                						Debug($"Calling builtin method {name} with params {ParamListToString(paramList)}");
	                						Command nw;
	                						switch (name)
	                						{
	                							case "move":
	                								nw = new Command(1, paramList[0].value.Eval());
	                								break;
	                							case "turn":
	                								nw = new Command(2, paramList[0].value.Eval());
	                								break;
	                							case "hit":
	                								nw = new Command(3);
	                								break;
	                							case "shoot":
	                								nw = new Command(4);
	                								break;
	                							default:
	                								Error($"Unknown builtin method {name}");
	                								return null;
	                						}
	                						#if !NOGUI
											parser.owner.commands.Enqueue(nw);
	                                        #endif
	                					}
				}
				return null;
			}
		}
		
		private Block rBlock;
		
		public Block curBlock
		{
			get{
				return rBlock;
			}
			set{
				Debug($"new block {value.name}");
				rBlock = value;
			}
		}
		
		public class OperationClass
		{
			public NinjaParser parser;
			
			public OperationClass()
			{
				
			}
			
			public OperationClass(OperationClass op)
			{
				
			}
			
			public OperationClass(NinjaParser p)
	        			{
	        				parser = p;
	        			}
			
			public virtual dynamic Eval()
			{
				Error("OperationClass class is abstract");
                return null;
			}
		}
	    
		public enum ObjType
		{
			Number, Logic, Var, Operation, Function
		}

		public class ExprStackObject
		{
			public NinjaParser parser;
			public ObjType type;
			public dynamic value;
			
			public ExprStackObject(): this(0, null) { }
			
			public ExprStackObject(double value, NinjaParser parser)
			{
				type = ObjType.Number;
				this.value = value;
				this.parser = parser;
			}

			public ExprStackObject(int value, NinjaParser parser)
			{
				type = ObjType.Number;
				this.value = value;
				this.parser = parser;
			}
			
			public ExprStackObject(bool value, NinjaParser parser)
			{
				type = ObjType.Number;
				this.value = value;
				this.parser = parser;
			}
			
			public dynamic Calc()
			{
	            				if (type == ObjType.Number)
	            					return value;
	            				if (type == ObjType.Var)
	            				{
	            					return parser.FindVar(value).value;
	            				}
	            
	            				Error("\"" + value + "\" is an operation");
	            				return null;
			}
			
			public new Type GetType()
			{
				VarType type = parser.FindVar(value).type;
	        	switch (type)
	        	{
	        		case VarType.Int:
		        		return typeof(int);	
	        		case VarType.Double:
	        			return typeof(double);		
	        		case VarType.Bool:
	        			return typeof(bool);
				}
				Error("Variable " + value + " has an unknown type");
	        	return null;
	        }
		}
		
		public class ExprClass : OperationClass
		{
			public List<ExprStackObject> exprStack;
			
			public ExprClass(OperationClass parent) : base(parent)
			{
				exprStack = new List<ExprStackObject>();
				//parser.curBlock.operations.Add(this);
			}
			
			public void Push(ExprStackObject value)
			{
				exprStack.Add(value);
			}
			
			public ExprStackObject Pop(List<ExprStackObject> vals)
			{
				var res = vals[vals.Count - 1];
				vals.RemoveAt(vals.Count - 1);
				return res;
			}
			
			public bool isCompatible(dynamic value1, dynamic value2, bool isLeftVar = false)
			{
				if (value1.GetType() == value1.GetType())
					return true;
				else if (value1.GetType() == typeof(double) && value2.GetType() == typeof(int))
					return true;
				else if (!isLeftVar && value1.GetType == typeof(int) && value2.GetType() == typeof(double))
					return true;
				return false;
			}		
			
			public ReturnType expectedReturnType;
			public dynamic value;
			
			public override dynamic Eval()
			{
				string s = "";
				foreach(var v in exprStack)
				{
					s += v.value + " ";
				}
				Debug($"Evaluating {s} from block {parser.curBlock.name}");
				List<ExprStackObject> stack = new List<ExprStackObject>();
				foreach (var elem in exprStack)
				{
					if (elem.type == ObjType.Number || elem.type == ObjType.Var)
						stack.Add(elem);
					else if (elem.type == ObjType.Function)
					{
						ArrayList<ParamData> pars = elem.value.paramList;
						for (int i = 0; i < pars.Count; ++i)
						{
							dynamic val = Pop(stack);
							val.Calc();
							pars[i].value = val.value;
						}
						dynamic result;
						if (elem.value == null)
						{
							result = -1;
						}
						else
						{
							if (elem.value.GetType() == typeof(int))
								result = elem.value;
							else if (elem.value.GetType() == typeof(double))
								result = elem.value;
							else if (elem.value.GetType() == typeof(bool))
								result = elem.value;
							else 
								result = elem.value.Eval();
						}
						stack.Add(new ExprStackObject(result, parser));
					}
					else
					{
						ExprStackObject left, right;
						dynamic leftVal, rightVal;
	                    					switch (elem.value)
	                    					{
	                    						case "&&":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal && rightVal, parser));
	                    							break;
	                    						
	                    						case "||":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal || rightVal, parser));
	                    							break;
	                    						
	                    						case "!":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (rightVal.GetType() != typeof(bool))
	                    								Error("Bool is required instead of " + rightVal);
	                    							stack.Add(new ExprStackObject(!rightVal, parser));
	                    							break;
	                    							
	                    						case "<":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal < rightVal, parser));
	                    							break;
	                    						
	                    						case ">":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal > rightVal, parser));
	                    							break;
	                    						
	                    						case "==":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal == rightVal, parser));
	                    							break;
	                    						
	                    						case "!=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal != rightVal, parser));
	                    							break;
	                    						
	                    						case "<=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal <= rightVal, parser));
	                    							break;
	                    						
	                    						case ">=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal >= rightVal, parser));
	                    							break;
	                    					
	                    						case "+":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal + rightVal, parser));
	                    							break;
	                    						
	                    						case "-":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal - rightVal, parser));
	                    							break;
	                    						
	                    						case "*":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal * rightVal, parser));
	                    							break;
	                    						
	                    						case "/":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal / rightVal, parser));
	                    							break;
	                    						
												case "%":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(leftVal % rightVal, parser));
	                    							break;
	                    							
												case "**":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							leftVal = left.Calc();
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(leftVal, rightVal))
	                    								Error("Incompatible types of values " + leftVal + " and " + rightVal);
	                    							stack.Add(new ExprStackObject(Math.Pow(leftVal, rightVal), parser));
	                    							break;	
	                    						
	                    						case "++pre":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0, rightVal))
	                    								Error(rightVal + " can't be incremented");
	                    							++parser.FindVar(right.value).value;
	                    							stack.Add(new ExprStackObject(rightVal, parser));
	                    							break;
	                    							
	                    						case "++post":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0, rightVal))
	                    								Error(rightVal + " can't be incremented");
	                    							stack.Add(new ExprStackObject(rightVal, parser));
	                    							++parser.FindVar(right.value).value;
	                    							break;
	                    							
	                    						case "--pre":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0, rightVal))
	                    								Error(rightVal + " can't be decremented");
	                    							--parser.FindVar(right.value).value;
	                    							stack.Add(new ExprStackObject(rightVal, parser));
	                    							break;
	                    							
	                    						case "--post":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0, rightVal))
	                    								Error(rightVal + " can't be decremented");
	                    							stack.Add(new ExprStackObject(rightVal, parser));
	                    							--parser.FindVar(right.value).value;
	                    							break;
	                    							
	                    						case "=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							try
	                    							{
	                    								rightVal = right.Calc();
	                    								if (!isCompatible(left, rightVal, true))
	                    									Error("Can't assign " + rightVal + " to " + left.value);
	                    								dynamic rightval = rightVal;
	                    								string su = (string) left.value;
	                    								VarData data = parser.FindVar(su);
	                    								if (CheckType(rightval.GetType(), data.type))
	                    									data.value = rightval;
	                    								else if (data.type == VarType.Double)
	                    									data.value = (double)rightval;
	                    								else
	                    									Error("Can't convert \"" + rightval + "\" to " + data.type);	
														Debug("Assigned " + rightVal + " of type " + rightVal.GetType() + " to " + left.value + " of type " + data.type);
	                    								stack.Add(new ExprStackObject(data.value, parser));
	                    							}
	                    							catch (KeyNotFoundException e)
	                    							{					
	                    								Error("Variable " + left.value + " does not exist in current context1\n" + e.StackTrace);
	                    							}
	                    							break;
	                    						
	                    						case "+=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							try
	                    							{
	                    								rightVal = right.Calc();
	                    								if (!isCompatible(left, rightVal, true))
	                    									Error("Can't assign " + rightVal + " to " + left.value);
	                    								dynamic rightval = rightVal;
	                    								VarData data = parser.FindVar(left.value);
	                    								if (data.value.GetType() == rightval.GetType())
	                    									data.value += rightval;
	                    								else if (data.type == VarType.Double)
	                    									data.value += (double)rightval;
	                    								else
	                    									Error("Can't convert \"" + rightval + "\" to " + data.type);
	                    								stack.Add(new ExprStackObject(data.value, parser));
	                    							}
	                    							catch (KeyNotFoundException)
	                    							{
	                    								Error("Variable " + left.value + " does not exist in current context2");
	                    							}
	                    							break;
	                    						
	                    						case "-=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							try
	                    							{
	                    								rightVal = right.Calc();
	                    								if (!isCompatible(left, rightVal, true))
	                    									Error("Can't assign " + rightVal + " to " + left.value);
	                    								dynamic rightval = rightVal;
	                    								VarData data = parser.FindVar(left.value);
	                    								if (data.value.GetType() == rightval.GetType())
	                    									data.value -= rightval;
	                    								else if (data.type == VarType.Double)
	                    									data.value -= (double)rightval;
	                    								else
	                    									Error("Can't convert \"" + rightval + "\" to " + data.type);
	                    								stack.Add(new ExprStackObject(data.value, parser));
	                    							}
	                    							catch (KeyNotFoundException)
	                    							{
	                    								Error("Variable " + left.value + " does not exist in current context3");
	                    							}
	                    							break;
	                    						
	                    						case "*=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							try
	                    							{
	                    								rightVal = right.Calc();
	                    								if (!isCompatible(left, rightVal, true))
	                    									Error("Can't assign " + rightVal + " to " + left.value);
	                    								dynamic rightval = rightVal;
	                    								VarData data = parser.FindVar(left.value);
	                    								if (data.value.GetType() == rightval.GetType())
	                    									data.value *= rightval;
	                    								else if (data.type == VarType.Double)
	                    									data.value *= (double)rightval;
	                    								else
	                    									Error("Can't convert \"" + rightval + "\" to " + data.type);
	                    								stack.Add(new ExprStackObject(data.value, parser));
	                    							}
	                    							catch (KeyNotFoundException)
	                    							{
	                    								Error("Variable " + left.value + " does not exist in current context4");
	                    							}
	                    							break;
	                    						
	                    						case "/=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							try
	                    							{
	                    								rightVal = right.Calc();
	                    								if (!isCompatible(left, rightVal, true))
	                    									Error("Can't assign " + rightVal + " to " + left.value);
	                    								dynamic rightval = rightVal;
	                    								VarData data = parser.FindVar(left.value);
	                    								if (data.value.GetType() == rightval.GetType())
	                    									data.value /= rightval;
	                    								else if (data.type == VarType.Double)
	                    									data.value /= (double)rightval;
	                    								else
	                    									Error("Can't convert \"" + rightval + "\" to " + data.type);
	                    								stack.Add(new ExprStackObject(data.value, parser));
	                    							}
	                    							catch (KeyNotFoundException)
	                    							{
	                    								Error("Variable " + left.value + " does not exist in current context5");
	                    							}
	                    							break;
	                    						
												case "%=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							try
	                    							{
	                    								rightVal = right.Calc();
	                    								if (!isCompatible(left, rightVal, true))
	                    									Error("Can't assign " + rightVal + " to " + left.value);
	                    								dynamic rightval = rightVal;
	                    								VarData data = parser.FindVar(left.value);
	                    								if (data.value.GetType() == rightval.GetType())
	                    									data.value %= rightval;
	                    								else if (data.type == VarType.Double)
	                    									data.value %= (double)rightval;
	                    								else
	                    									Error("Can't convert \"" + rightval + "\" to " + data.type);
	                    								stack.Add(new ExprStackObject(data.value, parser));
	                    							}
	                    							catch (KeyNotFoundException)
	                    							{
	                    								Error("Variable " + left.value + " does not exist in current context5");
	                    							}
	                    							break;

												case "**=":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							try
	                    							{
	                    								rightVal = right.Calc();
	                    								if (!isCompatible(left, rightVal, true))
	                    									Error("Can't assign " + rightVal + " to " + left.value);
	                    								dynamic rightval = rightVal;
	                    								VarData data = parser.FindVar(left.value);
	                    								if (data.value.GetType() == rightval.GetType())
	                    									data.value = Math.Pow(data.value, rightval);
	                    								else if (data.type == VarType.Double)
	                    									data.value = Math.Pow(data.value, rightval);
	                    								else
	                    									Error("Can't convert \"" + rightval + "\" to " + data.type);
	                    								stack.Add(new ExprStackObject(data.value, parser));
	                    							}
	                    							catch (KeyNotFoundException)
	                    							{
	                    								Error("Variable " + left.value + " does not exist in current context5");
	                    							}
	                    							break;

	                    							
	                    						case "sin":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0.0, rightVal))
	                    								Error("Can't convert " + rightVal + " to double");
	                    							stack.Add(new ExprStackObject(Math.Sin(rightVal), parser));
	                    							break;
	                    						
	                    						case "cos":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0.0, rightVal))
	                    								Error("Can't convert " + rightVal + " to double");
	                    							stack.Add(new ExprStackObject(Math.Cos(rightVal), parser));
	                    							break;
	                    						
	                    						case "tan":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0.0, rightVal))
	                    								Error("Can't convert " + rightVal + " to double");
	                    							stack.Add(new ExprStackObject(Math.Tan(rightVal), parser));
	                    							break;
	                    						
	                    						case "asin":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0.0, rightVal))
	                    								Error("Can't convert " + rightVal + " to double");
	                    							stack.Add(new ExprStackObject(Math.Asin(rightVal), parser));
	                    							break;
	                    						
	                    						case "acos":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0.0, rightVal))
	                    								Error("Can't convert " + rightVal + " to double");
	                    							stack.Add(new ExprStackObject(Math.Acos(rightVal), parser));
	                    							break;
	                    						
	                    						case "atan":
	                    							right = Pop(stack);
	                    							rightVal = right.Calc();
	                    							if (!isCompatible(0.0, rightVal))
	                    								Error("Can't convert " + rightVal + " to double");
	                    							stack.Add(new ExprStackObject(Math.Atan(rightVal), parser));
	                    							break;
	                    						
	                    						case "atan2":
	                    							right = Pop(stack);
	                    							left = Pop(stack);
	                    							rightVal = right.Calc();
	                    							leftVal = left.Calc();
	                    							if (!isCompatible(0.0, rightVal))
	                    								Error("Can't convert " + rightVal + " to double");
	                    							if (!isCompatible(0.0, leftVal))
	                    								Error("Can't convert " + leftVal + " to double");
	                    							stack.Add(new ExprStackObject(Math.Atan2(leftVal, rightVal), parser));
	                    							break;
	                    							
	                    					}
						
					}
				}
				if (stack.Count > 0)
	            {
	            	var res = stack[0];
	            	try
	                	                {
	                		                res.Calc();
	                	                }
	                	                catch (Exception e)
	                	                {
	                		                return null;
	                	                }
	            	if (res.value is string ss && parser.FindVar(ss) != null)
					{
	            		value = parser.FindVar(ss).value;
	            		return parser.FindVar(ss).value;
	            	}
	            	value = res.value;
	            	return res.value;	
	            }
	            return null;
			}
		}
		
		public VarData FindVar(string name)
		{
			Block par = curBlock;
			while (!par.varTable.ContainsKey(name) && !isParam(par, name))
			{
				Debug($"sSearching {name} in {par.name}");
				par = par.Parent;
				if (par == null)
				{
					break;
				}
			}                                
			if (par == null)
			{
				Error($"Variable {name} doesn\'t exist in current context!");
			}
			return par?.varTable[name];
		}

		public static bool isParam(Block data, string name)
		{
			if (data is MethodData method)
			{
				foreach (var paramData in method.paramList)
				{
					if (paramData.name == name)
					{
						if (!method.varTable.ContainsKey(name))
						{
							VarData varData = new VarData()
							{
								name = paramData.name,
								type =  paramData.type,
								value = paramData.value
							};
							method.varTable.Add(name, varData);
						}
						return true;
					}
				}	
			}
			return false;
		}

		public VarData FindVar(string name, Block block)
		{
			Block par = block;
			while (!par.varTable.ContainsKey(name) && !isParam(par, name))
			{
				Debug($"Searching {name} in {par.name}");
				par = par.Parent;
				if (par == null)
				{
					break;
				}
			}                                
			if (par == null)
			{
				Error($"Variable {name} doesn\'t exist in block {block.name} context!");
			}
			return par?.varTable[name];
		} 
		
		public class Cycles: OperationClass
	    {
	        public Block cycleBlock;
	        
	        	        public Cycles(NinjaParser parser)
	        	        {
	        		        cycleBlock = new Block(parser);
	        	        }
	        	        
			public ExprClass cond;
		}
	    
		public class While:Cycles
		{
			public override dynamic Eval()
	        {
                
	        	parser.curBlock = cycleBlock;
	        	Debug("---Entering whilecycle");
	        	int i = 0;
	        	while(cond.Eval())
				{
					Debug($"-=-While loop {i++}");
					cycleBlock.Eval();
	            }
	            Debug("---Exiting whilecycle");
	            parser.curBlock = cycleBlock.Parent;
	    		return null;
	        }
	        
	        public While(NinjaParser parser) : base(parser)
	        			{
	        			}
	    }
	    
	    public class Do_while:Cycles
	    {
			public override dynamic Eval()
	        {
            Debug("Do_while operations:");
            foreach (var elem in cycleBlock.operations)
                Debug(elem.ToString());
				do
				{
					parser.curBlock = cycleBlock;
					cycleBlock.Eval();
				}
				while(cond.Eval());
				parser.curBlock = parser.curBlock.Parent;
				return null;
			}
			
			public Do_while(NinjaParser parser) : base(parser)
	        			{
	        			}
		}
	    
	    public class For:Cycles
	    {
			public ExprClass first;
	    	public ExprClass last;
	    	
	    	public Block oneTimeBlock;
	    	
	        public override dynamic Eval()
	        {
	        	parser.curBlock = oneTimeBlock;
	        	first?.Eval();
	        	int t = 0;
	        	parser.curBlock = cycleBlock;
	            while(cond.Eval())
	            {
	            	parser.curBlock = cycleBlock;
	            	Debug($"==For iter {t++}");
	            	cycleBlock.Eval();
	            	Debug($"==For iter2 {t}");
	            	parser.curBlock = cycleBlock;
	            	last?.Eval();
	            	parser.curBlock = cycleBlock; 
	            }
	            parser.curBlock = oneTimeBlock.Parent;
	    		return null;
	        }
	        
	        public For(NinjaParser parser) : base(parser)
	        	        {
	        	        	oneTimeBlock = new Block(parser);
	        	        	oneTimeBlock.name = "otbl";
	        	        	cycleBlock.name = "cbl";
	        	        }
	    }    
	    
	    public class Condition:Cycles 
	    {
	    	public Block elseIfBlock;
	    	private bool full;
	        
	        	        public Condition(NinjaParser parser, bool f) : base(parser)
	        	        {
	        		        elseIfBlock = new Block(parser);
	        		        full = f;
	        	        }
	        	        
	        public override dynamic Eval()
	        {
	        	if(cond.Eval())
	            {
	            	parser.curBlock = cycleBlock;
	            	cycleBlock.Eval();
	            }
	            else if (full)
	            {
	            	parser.curBlock = elseIfBlock;
					elseIfBlock.Eval();
	            }
	            parser.curBlock = cycleBlock.Parent;
	    		return null;
	        }
	   	}

		public NinjaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NinjaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 80; function();
					}
					} 
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 86; main();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FUN_KEYWORD) {
				{
				{
				State = 87; function();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

							curBlock.parser = this;
			/*if (parser.metTable.ContainsKey("main"))
			                	{
			                		++depth;
			                		//GoThroughCalls(parser.metTable[call.name]);
			                		foreach(var sm in parser.metTable["main"].operations)
			                		{
			                			sm.Eval();
			                		}
			                	}*/
			                MethodData getSelfId = new MethodData(this){
			                	name = "getSelfId",
			                    returnType = ReturnType.Int,
								parser = this
			                };	
			                MethodData getHealth = new MethodData(this){
			                    name = "getHealth",
			                    returnType = ReturnType.Int,
								parser = this
			                };
			                ParamData ghp = new ParamData();
			                ghp.name = "id";
							ghp.paramType = ParamType.Receive;
							ghp.type = VarType.Int;
							getHealth.paramList.Add(ghp);
			                MethodData getPositionX = new MethodData(this){
								name = "getPositionX",
								returnType = ReturnType.Double,
								parser = this
							};
							ParamData gpxp = new ParamData();
							gpxp.name = "id";
			                gpxp.paramType = ParamType.Receive;
			                gpxp.type = VarType.Int;
			               	getPositionX.paramList.Add(gpxp);
			                MethodData getPositionY = new MethodData(this){
			                    name = "getPositionY",
								returnType = ReturnType.Double,
								parser = this
							};
							ParamData gpyp = new ParamData();
							gpyp.name = "id";
							gpyp.paramType = ParamType.Receive;
							gpyp.type = VarType.Int;
			                getPositionY.paramList.Add(gpyp);
							MethodData getDirection = new MethodData(this){
								name = "getDirection",
								returnType = ReturnType.Double,
								parser = this
							};
			                ParamData gdp = new ParamData();
			                gdp.name = "id";
							gdp.paramType = ParamType.Receive;
							gdp.type = VarType.Int;
							getDirection.paramList.Add(gdp);
							
							
							getSelfId.returnValue = 0;
							getHealth.returnValue = 10;
							getPositionX.returnValue = 0.0;
							getPositionY.returnValue = 0.0;
			                getDirection.returnValue = 90.0;
			                
			                               	
			                metTable.Add("getSelfId", getSelfId);
			                metTable.Add("getHealth", getHealth);
			                metTable.Add("getPositionX", getPositionX);
			                metTable.Add("getPositionY", getPositionY);
			                metTable.Add("getDirection", getDirection);
			                #if NOGUI
								metTable["main"].Eval();
							#endif

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public Main_signatureContext main_signature() {
			return GetRuleContext<Main_signatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public Main_codeContext main_code() {
			return GetRuleContext<Main_codeContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; main_signature();
			State = 96; Match(OBRACE);
			State = 97; main_code();
			State = 98; Match(CBRACE);

				

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_signatureContext : ParserRuleContext {
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public ITerminalNode VOID() { return GetToken(NinjaParser.VOID, 0); }
		public ITerminalNode MAIN() { return GetToken(NinjaParser.MAIN, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Main_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMain_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMain_signature(this);
		}
	}

	[RuleVersion(0)]
	public Main_signatureContext main_signature() {
		Main_signatureContext _localctx = new Main_signatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_main_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(FUN_KEYWORD);
			State = 102; Match(VOID);
			State = 103; Match(MAIN);
			State = 104; Match(LPAREN);
			State = 105; Match(RPAREN);

				MethodData newMet = new MethodData(this)
				{
					name = "main",
					returnType = ReturnType.Void,
					parser = this
				};
				metTable.Add("main", newMet);
				currentMet = "main";
				curBlock = newMet;

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public V_functionContext v_function() {
			return GetRuleContext<V_functionContext>(0);
		}
		public M_functionContext m_function() {
			return GetRuleContext<M_functionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; v_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; m_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class V_functionContext : ParserRuleContext {
		public V_fun_signatureContext v_fun_signature() {
			return GetRuleContext<V_fun_signatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public V_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterV_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitV_function(this);
		}
	}

	[RuleVersion(0)]
	public V_functionContext v_function() {
		V_functionContext _localctx = new V_functionContext(Context, State);
		EnterRule(_localctx, 8, RULE_v_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; v_fun_signature();
			State = 113; Match(OBRACE);
			State = 114; code();
			State = 115; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class V_fun_signatureContext : ParserRuleContext {
		public string funName;
		public IToken _ID;
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public ITerminalNode VOID() { return GetToken(NinjaParser.VOID, 0); }
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public V_fun_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_v_fun_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterV_fun_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitV_fun_signature(this);
		}
	}

	[RuleVersion(0)]
	public V_fun_signatureContext v_fun_signature() {
		V_fun_signatureContext _localctx = new V_fun_signatureContext(Context, State);
		EnterRule(_localctx, 10, RULE_v_fun_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(FUN_KEYWORD);
			State = 118; Match(VOID);
			State = 119; _localctx._ID = Match(ID);

				string methodName = (_localctx._ID!=null?_localctx._ID.Text:null);
				_localctx.funName =  methodName;
				if (methodName == "main" || metTable.ContainsKey(methodName))
					throw new NotImplementedException("!!!Method overloading is not supported yet!!!");

				MethodData newMet = new MethodData(this)
				{
					name = methodName,
					returnType = ReturnType.Void,
					parser = this
				};
				
				metTable.Add(newMet.name, newMet);
				currentMet = methodName;
				curBlock = newMet;

			State = 121; Match(LPAREN);
			State = 122; @params((_localctx._ID!=null?_localctx._ID.Text:null));
			State = 123; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class M_functionContext : ParserRuleContext {
		public M_fun_signatureContext _m_fun_signature;
		public Method_returnContext _method_return;
		public M_fun_signatureContext m_fun_signature() {
			return GetRuleContext<M_fun_signatureContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public CodeContext code() {
			return GetRuleContext<CodeContext>(0);
		}
		public Method_returnContext method_return() {
			return GetRuleContext<Method_returnContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public M_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterM_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitM_function(this);
		}
	}

	[RuleVersion(0)]
	public M_functionContext m_function() {
		M_functionContext _localctx = new M_functionContext(Context, State);
		EnterRule(_localctx, 12, RULE_m_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; _localctx._m_fun_signature = m_fun_signature();
			State = 126; Match(OBRACE);
			State = 127; code();
			State = 128; _localctx._method_return = method_return(curBlock.createOperationClass());
			State = 129; Match(CBRACE);


				string methodName = _localctx._m_fun_signature.funName;
				
				ReturnType actualReturn;
				
				/*switch(_localctx._method_return.type)
			    {
			        case "int":
			        	actualReturn = ReturnType.Int;
			        	break;
			        case "double":
			            actualReturn = ReturnType.Double;
			            break;
			        case "bool":
			            actualReturn = ReturnType.Bool;
			            break;		
			        default:
			    		throw new Exception($"Actual return is {_localctx._method_return.type}, expected declared return type {metTable[methodName].returnType}");    
			    }
				
				

				if (actualReturn != metTable[methodName].returnType){
					throw new Exception($"Actual return is {actualReturn}, expected declared return type {metTable[methodName].returnType}");
				} */
				
				if (_localctx._method_return.value == null)
				{
					Error($"null return foeee {methodName}");
				}

				metTable[methodName].returnValue = _localctx._method_return.value;


			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class M_fun_signatureContext : ParserRuleContext {
		public string funName;
		public MeaningfulTypeContext _meaningfulType;
		public IToken _ID;
		public ITerminalNode FUN_KEYWORD() { return GetToken(NinjaParser.FUN_KEYWORD, 0); }
		public MeaningfulTypeContext meaningfulType() {
			return GetRuleContext<MeaningfulTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public M_fun_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_m_fun_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterM_fun_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitM_fun_signature(this);
		}
	}

	[RuleVersion(0)]
	public M_fun_signatureContext m_fun_signature() {
		M_fun_signatureContext _localctx = new M_fun_signatureContext(Context, State);
		EnterRule(_localctx, 14, RULE_m_fun_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(FUN_KEYWORD);
			State = 133; _localctx._meaningfulType = meaningfulType();
			State = 134; _localctx._ID = Match(ID);

				
				string methodName = (_localctx._ID!=null?_localctx._ID.Text:null);
				_localctx.funName =  methodName;
				if (methodName == "main" || metTable.ContainsKey(methodName))
					throw new NotImplementedException("!!!Method overloading is not supported yet!!!");

				MethodData newMet = new MethodData(this)
				{
					name = methodName,
					isMeaningful = true,
					parser = this
				};
				
				switch((_localctx._meaningfulType!=null?TokenStream.GetText(_localctx._meaningfulType.Start,_localctx._meaningfulType.Stop):null))
			    {
			    	case "int":
			    		newMet.returnType = ReturnType.Int;
			    		break;
			    	case "double":
			            newMet.returnType = ReturnType.Double;
			           	break;
			        case "bool":
			            newMet.returnType = ReturnType.Bool;
			            break;		
			    }

				metTable.Add(newMet.name, newMet);
				currentMet = methodName;
				curBlock = newMet;

			State = 136; Match(LPAREN);
			State = 137; @params((_localctx._ID!=null?_localctx._ID.Text:null));
			State = 138; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 16, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				{
				State = 140; operation(curBlock.createOperationClass());
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_codeContext : ParserRuleContext {
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public Main_codeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMain_code(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMain_code(this);
		}
	}

	[RuleVersion(0)]
	public Main_codeContext main_code() {
		Main_codeContext _localctx = new Main_codeContext(Context, State);
		EnterRule(_localctx, 18, RULE_main_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				{
				State = 146; operation(curBlock.createOperationClass());
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public OperationClass oper;
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public Custom_callContext custom_call() {
			return GetRuleContext<Custom_callContext>(0);
		}
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public MyifContext myif() {
			return GetRuleContext<MyifContext>(0);
		}
		public Myif_shortContext myif_short() {
			return GetRuleContext<Myif_shortContext>(0);
		}
		public MywhileContext mywhile() {
			return GetRuleContext<MywhileContext>(0);
		}
		public Mydo_whileContext mydo_while() {
			return GetRuleContext<Mydo_whileContext>(0);
		}
		public MyforContext myfor() {
			return GetRuleContext<MyforContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public OperationContext(ParserRuleContext parent, int invokingState, OperationClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation(OperationClass oper) {
		OperationContext _localctx = new OperationContext(Context, State, oper);
		EnterRule(_localctx, 20, RULE_operation);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; call(curBlock.ToExpr(), true);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; custom_call(curBlock.ToExpr(), true);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 154; declare(curBlock.ToExpr());
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 155; ariphExprEx(curBlock.ToExpr());
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 156; boolExprEx(curBlock.ToExpr());
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 157; myif(null);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 158; myif_short(null);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 159; mywhile(null);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 160; mydo_while(null);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 161; myfor(null);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_returnContext : ParserRuleContext {
		public OperationClass oper;
		public string type;
		public dynamic value;
		public Val_or_idContext _val_or_id;
		public ITerminalNode RETURN_KEYWORD() { return GetToken(NinjaParser.RETURN_KEYWORD, 0); }
		public Val_or_idContext val_or_id() {
			return GetRuleContext<Val_or_idContext>(0);
		}
		public Method_returnContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Method_returnContext(ParserRuleContext parent, int invokingState, OperationClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_method_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMethod_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMethod_return(this);
		}
	}

	[RuleVersion(0)]
	public Method_returnContext method_return(OperationClass oper) {
		Method_returnContext _localctx = new Method_returnContext(Context, State, oper);
		EnterRule(_localctx, 22, RULE_method_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(RETURN_KEYWORD);
			State = 165; _localctx._val_or_id = val_or_id(curBlock.ToExpr());

				_localctx.type =  _localctx._val_or_id.type;
				_localctx.value =  _localctx._val_or_id.value;

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public string funName;
		public Var_signatureContext[] var_signature() {
			return GetRuleContexts<Var_signatureContext>();
		}
		public Var_signatureContext var_signature(int i) {
			return GetRuleContext<Var_signatureContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NinjaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NinjaParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public ParamsContext(ParserRuleContext parent, int invokingState, string funName)
			: base(parent, invokingState)
		{
			this.funName = funName;
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params(string funName) {
		ParamsContext _localctx = new ParamsContext(Context, State, funName);
		EnterRule(_localctx, 24, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY))) != 0)) {
				{
				State = 168; var_signature(funName);
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 169; Match(COMMA);
					State = 170; var_signature(funName);
					}
					}
					State = 175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_signatureContext : ParserRuleContext {
		public string funName;
		public MeaningfulTypeContext _meaningfulType;
		public IToken _ID;
		public MeaningfulTypeContext meaningfulType() {
			return GetRuleContext<MeaningfulTypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public Var_signatureContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Var_signatureContext(ParserRuleContext parent, int invokingState, string funName)
			: base(parent, invokingState)
		{
			this.funName = funName;
		}
		public override int RuleIndex { get { return RULE_var_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterVar_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitVar_signature(this);
		}
	}

	[RuleVersion(0)]
	public Var_signatureContext var_signature(string funName) {
		Var_signatureContext _localctx = new Var_signatureContext(Context, State, funName);
		EnterRule(_localctx, 26, RULE_var_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; _localctx._meaningfulType = meaningfulType();
			State = 179; _localctx._ID = Match(ID);

								VarData newVar = new VarData();
								newVar.name = (_localctx._ID!=null?_localctx._ID.Text:null);
								switch ((_localctx._meaningfulType!=null?TokenStream.GetText(_localctx._meaningfulType.Start,_localctx._meaningfulType.Stop):null))
								{
									case "int":
										newVar.type = VarType.Int;
										
										break;
										
									case "double":
										newVar.type = VarType.Double;
										
										break;
										
									case "bool":
										newVar.type = VarType.Bool;
										
										break;
								}
								ParamData pData = new ParamData();
								pData.name = (_localctx._ID!=null?_localctx._ID.Text:null);
								pData.type = newVar.type;
								metTable[funName].paramList.Add(pData);
								metTable[funName].varTable[(_localctx._ID!=null?_localctx._ID.Text:null)] = newVar;
							
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_func_stateContext : ParserRuleContext {
		public ReturnType returnType;
		public Builtin_func_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_func_state; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBuiltin_func_state(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBuiltin_func_state(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_func_stateContext builtin_func_state() {
		Builtin_func_stateContext _localctx = new Builtin_func_stateContext(Context, State);
		EnterRule(_localctx, 28, RULE_builtin_func_state);
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; Match(T__0);
				_localctx.returnType =  ReturnType.Int;
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; Match(T__1);
				_localctx.returnType =  ReturnType.Double;
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186; Match(T__2);
				_localctx.returnType =  ReturnType.Double;
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 188; Match(T__3);
				_localctx.returnType =  ReturnType.Double;
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 5);
				{
				State = 190; Match(T__4);
				_localctx.returnType =  ReturnType.Int;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_func_pContext : ParserRuleContext {
		public Builtin_func_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_func_p; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBuiltin_func_p(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBuiltin_func_p(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_func_pContext builtin_func_p() {
		Builtin_func_pContext _localctx = new Builtin_func_pContext(Context, State);
		EnterRule(_localctx, 30, RULE_builtin_func_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__6) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_func_eContext : ParserRuleContext {
		public Builtin_func_eContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_func_e; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBuiltin_func_e(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBuiltin_func_e(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_func_eContext builtin_func_e() {
		Builtin_func_eContext _localctx = new Builtin_func_eContext(Context, State);
		EnterRule(_localctx, 32, RULE_builtin_func_e);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ExprClass oper;
		public bool independent;
		public CallData callData;
		public Parameterized_callContext _parameterized_call;
		public Simple_callContext _simple_call;
		public Parameterized_callContext parameterized_call() {
			return GetRuleContext<Parameterized_callContext>(0);
		}
		public Simple_callContext simple_call() {
			return GetRuleContext<Simple_callContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CallContext(ParserRuleContext parent, int invokingState, ExprClass oper, bool independent)
			: base(parent, invokingState)
		{
			this.oper = oper;
			this.independent = independent;
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call(ExprClass oper, bool independent) {
		CallContext _localctx = new CallContext(Context, State, oper, independent);
		EnterRule(_localctx, 34, RULE_call);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; _localctx._parameterized_call = parameterized_call(_localctx.oper);


					CallData data = new CallData(){
						callType = CallType.BuiltIn, 
						name = (_localctx._parameterized_call!=null?TokenStream.GetText(_localctx._parameterized_call.Start,_localctx._parameterized_call.Stop):null).Substring(0, (_localctx._parameterized_call!=null?TokenStream.GetText(_localctx._parameterized_call.Start,_localctx._parameterized_call.Stop):null).IndexOf("(")),
						returnType = _localctx._parameterized_call.type,
						parent = curBlock,
						parser = this
					};
					
					string methodName = currentMet;
					if(methodName != "?" && independent){
						curBlock.operations.Add(data);
					}
					
					foreach (var par in _localctx._parameterized_call.call_params().val_or_id())
				    	{
				    		
				    		ParamData d = new ParamData();
				    		d.paramType = ParamType.Pass;
				    		switch (par.type)
				            {
				            	case "int":
				            		d.type = VarType.Int;		
				            		break;
				            	case "double":
				            		d.type = VarType.Double;
				            		break;
				            	case "bool":
				            		d.type = VarType.Bool;
				            		break;
				            	//case "other":
				            	//	break;
				            						
				            	default:
				            		//Error($"Unknown type {par.type}");
				            		//throw new NotImplementedException();
				            		break;
				            }
				            d.value = par.value;
				    		data.paramList.Insert(0, d);		
				    	}
						_localctx.callData =  data;


				}
				break;
			case T__7:
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201; _localctx._simple_call = simple_call();


					CallData data = new CallData(){
						callType = CallType.BuiltIn, 
						name = (_localctx._simple_call!=null?TokenStream.GetText(_localctx._simple_call.Start,_localctx._simple_call.Stop):null).Substring(0, (_localctx._simple_call!=null?TokenStream.GetText(_localctx._simple_call.Start,_localctx._simple_call.Stop):null).IndexOf("(")),
						returnType = ReturnType.Void,
				        parent = curBlock,
						parser = this
					};
					_localctx.callData =  data;
					string methodName = currentMet;
					if(methodName != "?" && independent){
						curBlock.operations.Add(data);
					}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameterized_callContext : ParserRuleContext {
		public ExprClass oper;
		public ExprClass res;
		public ReturnType type;
		public Builtin_func_stateContext _builtin_func_state;
		public Builtin_func_pContext builtin_func_p() {
			return GetRuleContext<Builtin_func_pContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public Call_paramsContext call_params() {
			return GetRuleContext<Call_paramsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Builtin_func_stateContext builtin_func_state() {
			return GetRuleContext<Builtin_func_stateContext>(0);
		}
		public Parameterized_callContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Parameterized_callContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_parameterized_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterParameterized_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitParameterized_call(this);
		}
	}

	[RuleVersion(0)]
	public Parameterized_callContext parameterized_call(ExprClass oper) {
		Parameterized_callContext _localctx = new Parameterized_callContext(Context, State, oper);
		EnterRule(_localctx, 36, RULE_parameterized_call);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; builtin_func_p();
				State = 207; Match(LPAREN);
				State = 208; call_params(_localctx.oper);
				State = 209; Match(RPAREN);

					_localctx.type =  ReturnType.Void;
					_localctx.res =  _localctx.oper;

				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; _localctx._builtin_func_state = builtin_func_state();
				State = 213; Match(LPAREN);
				State = 214; call_params(_localctx.oper);
				State = 215; Match(RPAREN);

				    _localctx.type =  _localctx._builtin_func_state.returnType;
				    _localctx.res =  _localctx.oper;

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_callContext : ParserRuleContext {
		public Builtin_func_eContext builtin_func_e() {
			return GetRuleContext<Builtin_func_eContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Simple_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterSimple_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitSimple_call(this);
		}
	}

	[RuleVersion(0)]
	public Simple_callContext simple_call() {
		Simple_callContext _localctx = new Simple_callContext(Context, State);
		EnterRule(_localctx, 38, RULE_simple_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; builtin_func_e();
			State = 221; Match(LPAREN);
			State = 222; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Custom_callContext : ParserRuleContext {
		public ExprClass oper;
		public bool independent;
		public string funName;
		public CallData callData;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public Call_paramsContext call_params() {
			return GetRuleContext<Call_paramsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Custom_callContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Custom_callContext(ParserRuleContext parent, int invokingState, ExprClass oper, bool independent)
			: base(parent, invokingState)
		{
			this.oper = oper;
			this.independent = independent;
		}
		public override int RuleIndex { get { return RULE_custom_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCustom_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCustom_call(this);
		}
	}

	[RuleVersion(0)]
	public Custom_callContext custom_call(ExprClass oper, bool independent) {
		Custom_callContext _localctx = new Custom_callContext(Context, State, oper, independent);
		EnterRule(_localctx, 40, RULE_custom_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; _localctx._ID = Match(ID);
			State = 225; Match(LPAREN);
			State = 226; call_params(_localctx.oper);
			State = 227; Match(RPAREN);


				string callName = (_localctx._ID!=null?_localctx._ID.Text:null);
				_localctx.funName =  callName;
				CallData data = new CallData(){
					callType = CallType.Custom, 
					name = callName,
			        parent = curBlock,
					parser = this
				};
				
				if (metTable.ContainsKey(callName))
					data.returnType = metTable[callName].returnType;

				foreach (var par in _localctx.call_params().val_or_id())
				{
					
					ParamData d = new ParamData();
					d.paramType = ParamType.Pass;
					switch (par.type)
			        {
			        	case "int":
			        		d.type = VarType.Int;		
			        		break;
			        	case "double":
			        		d.type = VarType.Double;
			        		break;
			        	case "bool":
			        		d.type = VarType.Bool;
			        		break;
			        	//case "other":
			        	//	break;
			        						
			        	default:
			        		//Error($"Unknown type {par.type}");
			        		//throw new NotImplementedException();
			        		break;
			        }
			        d.value = par.value;
					data.paramList.Insert(0, d);    			
				}
				
				string methodName = currentMet;
				if (independent)
			    	curBlock.operations.Add(data);
				_localctx.callData =  data;

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_paramsContext : ParserRuleContext {
		public ExprClass oper;
		public Val_or_idContext[] val_or_id() {
			return GetRuleContexts<Val_or_idContext>();
		}
		public Val_or_idContext val_or_id(int i) {
			return GetRuleContext<Val_or_idContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NinjaParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NinjaParser.COMMA, i);
		}
		public Call_paramsContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Call_paramsContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_call_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterCall_params(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitCall_params(this);
		}
	}

	[RuleVersion(0)]
	public Call_paramsContext call_params(ExprClass oper) {
		Call_paramsContext _localctx = new Call_paramsContext(Context, State, oper);
		EnterRule(_localctx, 42, RULE_call_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				State = 230; val_or_id(_localctx.oper);
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 231; Match(COMMA);
					State = 232; val_or_id(_localctx.oper);
					}
					}
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Val_or_idContext : ParserRuleContext {
		public ExprClass oper;
		public string type;
		public dynamic value;
		public AriphExprExContext _ariphExprEx;
		public BoolExprExContext _boolExprEx;
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public Val_or_idContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Val_or_idContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_val_or_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterVal_or_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitVal_or_id(this);
		}
	}

	[RuleVersion(0)]
	public Val_or_idContext val_or_id(ExprClass oper) {
		Val_or_idContext _localctx = new Val_or_idContext(Context, State, oper);
		EnterRule(_localctx, 44, RULE_val_or_id);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240; _localctx._ariphExprEx = ariphExprEx(_localctx.oper);

								
								//if(_localctx._ariphExprEx.res.isEvaluated)
				                //		_localctx.value =  _localctx._ariphExprEx.res.value;
				                //	else	
				                		_localctx.value =  _localctx._ariphExprEx.res;
								
								if (_localctx.value.GetType() == typeof(int)) //ariphExprEx.value.GetType() == typeof(int)")
									_localctx.type =  "int";
								else if (_localctx.value.GetType() == typeof(double))
									_localctx.type =  "double";
								else if (_localctx.value.GetType() == typeof(bool))
				                    _localctx.type =  "bool";
				                else if (_localctx.value.GetType() == typeof(ExprClass))
				                	_localctx.type =  _localctx.value.GetType().ToString();
							
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; _localctx._boolExprEx = boolExprEx(_localctx.oper);

								_localctx.value =  _localctx._boolExprEx.res;
								_localctx.type =  "bool";
							
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MyifContext : ParserRuleContext {
		public ExprClass oper;
		public BoolExprExContext _boolExprEx;
		public ITerminalNode IF() { return GetToken(NinjaParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode[] OBRACE() { return GetTokens(NinjaParser.OBRACE); }
		public ITerminalNode OBRACE(int i) {
			return GetToken(NinjaParser.OBRACE, i);
		}
		public ITerminalNode[] CBRACE() { return GetTokens(NinjaParser.CBRACE); }
		public ITerminalNode CBRACE(int i) {
			return GetToken(NinjaParser.CBRACE, i);
		}
		public ITerminalNode ELSE() { return GetToken(NinjaParser.ELSE, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public MyifContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public MyifContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_myif; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMyif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMyif(this);
		}
	}

	[RuleVersion(0)]
	public MyifContext myif(ExprClass oper) {
		MyifContext _localctx = new MyifContext(Context, State, oper);
		EnterRule(_localctx, 46, RULE_myif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{

				ExprClass bExpr = new ExprClass(new OperationClass(this));
				bExpr.parser = this;
				
				Condition ifer = new Condition(this, false)
				{
					
					parser = this
				};
				curBlock.operations.Add(ifer);
				ifer.cycleBlock.Parent = curBlock;
				curBlock = ifer.cycleBlock;


			State = 249; Match(IF);
			State = 250; Match(LPAREN);
			State = 251; _localctx._boolExprEx = boolExprEx(bExpr);
			State = 252; Match(RPAREN);
			State = 253; Match(OBRACE);

			     	ifer.cond=_localctx._boolExprEx.res;
			     
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				{
				State = 255; operation(curBlock.createOperationClass());
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261; Match(CBRACE);
			State = 262; Match(ELSE);
			State = 263; Match(OBRACE);

			      	ifer.elseIfBlock.Parent = curBlock.Parent;
			      	curBlock = ifer.elseIfBlock;
			      
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				{
				State = 265; operation(curBlock.createOperationClass());
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 271; Match(CBRACE);

			        curBlock = curBlock.Parent;
			     
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Myif_shortContext : ParserRuleContext {
		public ExprClass oper;
		public BoolExprExContext _boolExprEx;
		public ITerminalNode IF() { return GetToken(NinjaParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public Myif_shortContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Myif_shortContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_myif_short; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMyif_short(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMyif_short(this);
		}
	}

	[RuleVersion(0)]
	public Myif_shortContext myif_short(ExprClass oper) {
		Myif_shortContext _localctx = new Myif_shortContext(Context, State, oper);
		EnterRule(_localctx, 48, RULE_myif_short);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{


				ExprClass bExpr = new ExprClass(new OperationClass(this));
				bExpr.parser = this;
				
				Condition ifer = new Condition(this, false)
				{
					
					parser = this
				};
				curBlock.operations.Add(ifer);
				ifer.cycleBlock.Parent = curBlock;
				curBlock = ifer.cycleBlock;


			State = 275; Match(IF);
			State = 276; Match(LPAREN);
			State = 277; _localctx._boolExprEx = boolExprEx(bExpr);
			State = 278; Match(RPAREN);
			State = 279; Match(OBRACE);

			    		ifer.cond=_localctx._boolExprEx.res;
			         	
			         	
			    
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				{
				State = 281; operation(curBlock.createOperationClass());
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 287; Match(CBRACE);

			        curBlock = curBlock.Parent;
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MywhileContext : ParserRuleContext {
		public ExprClass oper;
		public BoolExprExContext _boolExprEx;
		public ITerminalNode WHILE() { return GetToken(NinjaParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public MywhileContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public MywhileContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_mywhile; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMywhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMywhile(this);
		}
	}

	[RuleVersion(0)]
	public MywhileContext mywhile(ExprClass oper) {
		MywhileContext _localctx = new MywhileContext(Context, State, oper);
		EnterRule(_localctx, 50, RULE_mywhile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{

			ExprClass bExpr = new ExprClass(new OperationClass(this));
			bExpr.parser = this;

			While whiler = new While(this)
			     	{
			     		
						parser = this
			     	};
			     	curBlock.operations.Add(whiler);
			     	whiler.cycleBlock.Parent = curBlock;
			     	curBlock = whiler.cycleBlock;


			State = 291; Match(WHILE);
			State = 292; Match(LPAREN);
			State = 293; _localctx._boolExprEx = boolExprEx(bExpr);
			State = 294; Match(RPAREN);
			State = 295; Match(OBRACE);

			     	whiler.cond=_localctx._boolExprEx.res;
			     
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				{
				State = 297; operation(curBlock.createOperationClass());
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 303; Match(CBRACE);

			        curBlock = curBlock.Parent;
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mydo_whileContext : ParserRuleContext {
		public ExprClass oper;
		public BoolExprExContext _boolExprEx;
		public ITerminalNode DO() { return GetToken(NinjaParser.DO, 0); }
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public ITerminalNode WHILE() { return GetToken(NinjaParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public Mydo_whileContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Mydo_whileContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_mydo_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMydo_while(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMydo_while(this);
		}
	}

	[RuleVersion(0)]
	public Mydo_whileContext mydo_while(ExprClass oper) {
		Mydo_whileContext _localctx = new Mydo_whileContext(Context, State, oper);
		EnterRule(_localctx, 52, RULE_mydo_while);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(DO);
			State = 307; Match(OBRACE);

			          		ExprClass bExpr = new ExprClass(new OperationClass(this));
			                bExpr.parser = this;
			          		Do_while doer = new Do_while(this);
							doer.parser = this;
			               	curBlock.operations.Add(doer);
			               	doer.cycleBlock.Parent = curBlock;
			               	curBlock = doer.cycleBlock;
			          
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				{
				State = 309; operation(curBlock.createOperationClass());
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315; Match(CBRACE);
			State = 316; Match(WHILE);
			State = 317; Match(LPAREN);
			State = 318; _localctx._boolExprEx = boolExprEx(bExpr);
			State = 319; Match(RPAREN);

			            	doer.cond=_localctx._boolExprEx.res;
			            	curBlock = curBlock.Parent;
			           
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MyforContext : ParserRuleContext {
		public ExprClass oper;
		public DeclareContext _declare;
		public AriphExprExContext _ariphExprEx;
		public BoolExprExContext _boolExprEx;
		public AriphExprExContext l;
		public ITerminalNode FOR() { return GetToken(NinjaParser.FOR, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(NinjaParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(NinjaParser.SEMICOLON, i);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode OBRACE() { return GetToken(NinjaParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(NinjaParser.CBRACE, 0); }
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public AriphExprExContext[] ariphExprEx() {
			return GetRuleContexts<AriphExprExContext>();
		}
		public AriphExprExContext ariphExprEx(int i) {
			return GetRuleContext<AriphExprExContext>(i);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public MyforContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public MyforContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_myfor; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMyfor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMyfor(this);
		}
	}

	[RuleVersion(0)]
	public MyforContext myfor(ExprClass oper) {
		MyforContext _localctx = new MyforContext(Context, State, oper);
		EnterRule(_localctx, 54, RULE_myfor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{


				

			State = 323; Match(FOR);
			State = 324; Match(LPAREN);


					For forer = new For(this);
					forer.parser = this;
					
					forer.oneTimeBlock.Parent = curBlock;
					forer.cycleBlock.Parent = forer.oneTimeBlock;
			            	curBlock = forer.oneTimeBlock;
					
					ExprClass fExpr = new ExprClass(new OperationClass(this));
			        fExpr.parser = this;    	
									

			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTKEY:
			case DOUBLEKEY:
			case BOOLKEY:
				{
				State = 326; _localctx._declare = declare(fExpr);

					fExpr = _localctx._declare.res;

				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case SIN:
			case COS:
			case TAN:
			case ASIN:
			case ACOS:
			case ATAN:
			case ATAN2:
			case INC:
			case DEC:
			case DOUBLE:
			case INT:
			case LPAREN:
			case ID:
				{
				State = 329; _localctx._ariphExprEx = ariphExprEx(fExpr);

					fExpr = _localctx._ariphExprEx.res;

				}
				break;
			case SEMICOLON:
				break;
			default:
				break;
			}
			State = 334; Match(SEMICOLON);

			                  		
			                      	ExprClass cExpr = new ExprClass(new OperationClass(this));
			                      	cExpr.parser = this;
			                  
			                  
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				State = 336; _localctx._boolExprEx = boolExprEx(cExpr);
				}
			}

			State = 339; Match(SEMICOLON);

			                 
								ExprClass lExpr = new ExprClass(new OperationClass(this));
			                 lExpr.parser = this;
			                 
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				State = 341; _localctx.l = _localctx._ariphExprEx = ariphExprEx(lExpr);
				}
			}

			State = 344; Match(RPAREN);
			State = 345; Match(OBRACE);


							try {
								forer.cond = _localctx._boolExprEx.res;
							} catch {
								 cExpr.Push(new ExprStackObject(true, this));
								 forer.cond = cExpr;
							}
						  	forer.first = fExpr;
						  	forer.last = (_localctx.l == null) ? null : _localctx.l.res;
							curBlock = forer.cycleBlock;       	
			        
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY) | (1L << WHILE) | (1L << FOR) | (1L << DO) | (1L << IF) | (1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN) | (1L << ATAN2) | (1L << INC) | (1L << DEC) | (1L << NOT) | (1L << BOOL) | (1L << DOUBLE) | (1L << INT) | (1L << LPAREN))) != 0) || _la==ID) {
				{
				{
				State = 347; operation(curBlock.createOperationClass());
				}
				}
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 353; Match(CBRACE);
			 
			        	curBlock = forer.oneTimeBlock.Parent;
			        	curBlock.operations.Add(forer);    
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphOperandContext : ParserRuleContext {
		public ExprClass oper;
		public IToken _INT;
		public IToken _DOUBLE;
		public Custom_callContext _custom_call;
		public CallContext _call;
		public IToken incdec;
		public ITerminalNode INT() { return GetToken(NinjaParser.INT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(NinjaParser.DOUBLE, 0); }
		public Custom_callContext custom_call() {
			return GetRuleContext<Custom_callContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public AriphIDContext ariphID() {
			return GetRuleContext<AriphIDContext>(0);
		}
		public TrigContext trig() {
			return GetRuleContext<TrigContext>(0);
		}
		public Trig2Context trig2() {
			return GetRuleContext<Trig2Context>(0);
		}
		public ITerminalNode INC() { return GetToken(NinjaParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(NinjaParser.DEC, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public AriphOperandContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphOperandContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphOperand(this);
		}
	}

	[RuleVersion(0)]
	public AriphOperandContext ariphOperand(ExprClass oper) {
		AriphOperandContext _localctx = new AriphOperandContext(Context, State, oper);
		EnterRule(_localctx, 56, RULE_ariphOperand);
		int _la;
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356; _localctx._INT = Match(INT);

				                   _localctx.oper.Push(new ExprStackObject(int.Parse((_localctx._INT!=null?_localctx._INT.Text:null)), this));
				               
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; _localctx._DOUBLE = Match(DOUBLE);

									double value;
				               		try 
				               		{
				                   		value = double.Parse((_localctx._DOUBLE!=null?_localctx._DOUBLE.Text:null));
				                   	} 
				                   	catch
				                   	{
				                   		value = double.Parse((_localctx._DOUBLE!=null?_localctx._DOUBLE.Text:null).Replace('.', ','));
				                   	}
									_localctx.oper.Push(new ExprStackObject(value, this));
				               
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 360; _localctx._custom_call = custom_call(_localctx.oper, false);

				             		_localctx.oper.Push(new ExprStackObject()
									{
										type = ObjType.Function,
										value = _localctx._custom_call.callData,
										parser = this
									});
				             	
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 363; _localctx._call = call(_localctx.oper, false);

				                    _localctx.oper.Push(new ExprStackObject()
				             		{
				             			type = ObjType.Function,
				             			value = _localctx._call.callData,
										parser = this
				             		});
				                
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 366; ariphID(_localctx.oper);


				               
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 369; trig(_localctx.oper);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 370; trig2(_localctx.oper);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 371;
				_localctx.incdec = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INC || _la==DEC) ) {
					_localctx.incdec = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 372; ariphID(_localctx.oper);

									_localctx.oper.Push(new ExprStackObject()
									{
										type = ObjType.Operation,
										value = (_localctx.incdec!=null?_localctx.incdec.Text:null) + "pre",
										parser = this
									});
							   
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 375; ariphID(_localctx.oper);
				State = 376;
				_localctx.incdec = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INC || _la==DEC) ) {
					_localctx.incdec = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}

							   
									_localctx.oper.Push(new ExprStackObject()
									{
										type = ObjType.Operation,
										value = (_localctx.incdec!=null?_localctx.incdec.Text:null) + "post",
										parser = this
									});
							   
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 379; Match(LPAREN);
				State = 380; ariphExprEx(_localctx.oper);
				State = 381; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphTermContext : ParserRuleContext {
		public ExprClass oper;
		public IToken muldiv;
		public AriphOperandContext[] ariphOperand() {
			return GetRuleContexts<AriphOperandContext>();
		}
		public AriphOperandContext ariphOperand(int i) {
			return GetRuleContext<AriphOperandContext>(i);
		}
		public ITerminalNode[] POW() { return GetTokens(NinjaParser.POW); }
		public ITerminalNode POW(int i) {
			return GetToken(NinjaParser.POW, i);
		}
		public ITerminalNode[] MUL() { return GetTokens(NinjaParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(NinjaParser.MUL, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(NinjaParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(NinjaParser.DIV, i);
		}
		public ITerminalNode[] MOD() { return GetTokens(NinjaParser.MOD); }
		public ITerminalNode MOD(int i) {
			return GetToken(NinjaParser.MOD, i);
		}
		public AriphTermContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphTermContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphTerm; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphTerm(this);
		}
	}

	[RuleVersion(0)]
	public AriphTermContext ariphTerm(ExprClass oper) {
		AriphTermContext _localctx = new AriphTermContext(Context, State, oper);
		EnterRule(_localctx, 58, RULE_ariphTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; ariphOperand(_localctx.oper);
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD) | (1L << POW))) != 0)) {
				{
				{
				State = 386;
				_localctx.muldiv = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD) | (1L << POW))) != 0)) ) {
					_localctx.muldiv = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 387; ariphOperand(_localctx.oper);
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

							if ((_localctx.muldiv!=null?_localctx.muldiv.Text:null) != null)
							{
								_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Operation,
									value = (_localctx.muldiv!=null?_localctx.muldiv.Text:null),
									parser = this
								 });
							}
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphExprContext : ParserRuleContext {
		public ExprClass oper;
		public IToken addsub;
		public AriphTermContext[] ariphTerm() {
			return GetRuleContexts<AriphTermContext>();
		}
		public AriphTermContext ariphTerm(int i) {
			return GetRuleContext<AriphTermContext>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(NinjaParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(NinjaParser.ADD, i);
		}
		public ITerminalNode[] SUB() { return GetTokens(NinjaParser.SUB); }
		public ITerminalNode SUB(int i) {
			return GetToken(NinjaParser.SUB, i);
		}
		public AriphExprContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphExprContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphExpr(this);
		}
	}

	[RuleVersion(0)]
	public AriphExprContext ariphExpr(ExprClass oper) {
		AriphExprContext _localctx = new AriphExprContext(Context, State, oper);
		EnterRule(_localctx, 60, RULE_ariphExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; ariphTerm(_localctx.oper);

			                
			            
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 397;
				_localctx.addsub = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
					_localctx.addsub = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 398; ariphTerm(_localctx.oper);
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}

							if ((_localctx.addsub!=null?_localctx.addsub.Text:null) != null)
							{
								_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Operation,
									value = (_localctx.addsub!=null?_localctx.addsub.Text:null),
									parser = this
								 });
								 
							}
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphExprExContext : ParserRuleContext {
		public ExprClass oper;
		public ExprClass res;
		public IToken assigns;
		public AriphExprContext ariphExpr() {
			return GetRuleContext<AriphExprContext>(0);
		}
		public AriphIDContext ariphID() {
			return GetRuleContext<AriphIDContext>(0);
		}
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(NinjaParser.ASSIGN, 0); }
		public ITerminalNode ADDASSIGN() { return GetToken(NinjaParser.ADDASSIGN, 0); }
		public ITerminalNode SUBASSIGN() { return GetToken(NinjaParser.SUBASSIGN, 0); }
		public ITerminalNode POWASSIGN() { return GetToken(NinjaParser.POWASSIGN, 0); }
		public ITerminalNode MULASSIGN() { return GetToken(NinjaParser.MULASSIGN, 0); }
		public ITerminalNode DIVASSIGN() { return GetToken(NinjaParser.DIVASSIGN, 0); }
		public ITerminalNode MODASSIGN() { return GetToken(NinjaParser.MODASSIGN, 0); }
		public AriphExprExContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphExprExContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphExprEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphExprEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphExprEx(this);
		}
	}

	[RuleVersion(0)]
	public AriphExprExContext ariphExprEx(ExprClass oper) {
		AriphExprExContext _localctx = new AriphExprExContext(Context, State, oper);
		EnterRule(_localctx, 62, RULE_ariphExprEx);
		int _la;
		try {
			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 406; ariphExpr(_localctx.oper);

				                _localctx.res =  _localctx.oper;
				            
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409; ariphID(_localctx.oper);
				State = 410;
				_localctx.assigns = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << ADDASSIGN) | (1L << SUBASSIGN) | (1L << MULASSIGN) | (1L << DIVASSIGN) | (1L << MODASSIGN) | (1L << POWASSIGN))) != 0)) ) {
					_localctx.assigns = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 411; ariphExprEx(_localctx.oper);

				                _localctx.oper.Push(new ExprStackObject()
									 {
										type = ObjType.Operation,
										value = (_localctx.assigns!=null?_localctx.assigns.Text:null),
										parser = this
									 });
								_localctx.res =  _localctx.oper;
				            
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOperandContext : ParserRuleContext {
		public ExprClass oper;
		public IToken _BOOL;
		public Custom_callContext _custom_call;
		public IToken comp;
		public IToken _NOT;
		public ITerminalNode BOOL() { return GetToken(NinjaParser.BOOL, 0); }
		public Custom_callContext custom_call() {
			return GetRuleContext<Custom_callContext>(0);
		}
		public AriphIDContext ariphID() {
			return GetRuleContext<AriphIDContext>(0);
		}
		public AriphExprExContext[] ariphExprEx() {
			return GetRuleContexts<AriphExprExContext>();
		}
		public AriphExprExContext ariphExprEx(int i) {
			return GetRuleContext<AriphExprExContext>(i);
		}
		public ITerminalNode LESS() { return GetToken(NinjaParser.LESS, 0); }
		public ITerminalNode GREATER() { return GetToken(NinjaParser.GREATER, 0); }
		public ITerminalNode EQUAL() { return GetToken(NinjaParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(NinjaParser.NOTEQUAL, 0); }
		public ITerminalNode LESSEQUAL() { return GetToken(NinjaParser.LESSEQUAL, 0); }
		public ITerminalNode GREQUAL() { return GetToken(NinjaParser.GREQUAL, 0); }
		public ITerminalNode NOT() { return GetToken(NinjaParser.NOT, 0); }
		public BoolOperandContext boolOperand() {
			return GetRuleContext<BoolOperandContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public BoolOperandContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public BoolOperandContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_boolOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBoolOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBoolOperand(this);
		}
	}

	[RuleVersion(0)]
	public BoolOperandContext boolOperand(ExprClass oper) {
		BoolOperandContext _localctx = new BoolOperandContext(Context, State, oper);
		EnterRule(_localctx, 64, RULE_boolOperand);
		int _la;
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416; _localctx._BOOL = Match(BOOL);

				                  _localctx.oper.Push(new ExprStackObject(bool.Parse((_localctx._BOOL!=null?_localctx._BOOL.Text:null)), this));
				              
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 418; _localctx._custom_call = custom_call(_localctx.oper, false);

				                          		_localctx.oper.Push(new ExprStackObject()
				             					{
				             						type = ObjType.Function,
				             						value = _localctx._custom_call.callData,
													parser = this
				             					});
				                          	
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 421; ariphID(_localctx.oper);

							  
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 424; ariphExprEx(_localctx.oper);
				State = 425;
				_localctx.comp = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS) | (1L << GREATER) | (1L << EQUAL) | (1L << NOTEQUAL) | (1L << LESSEQUAL) | (1L << GREQUAL))) != 0)) ) {
					_localctx.comp = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 426; ariphExprEx(_localctx.oper);

								_localctx.oper.Push(new ExprStackObject()
								{
									type = ObjType.Operation,
									value = (_localctx.comp!=null?_localctx.comp.Text:null),
										parser = this
								}); 
							  
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 429; _localctx._NOT = Match(NOT);
				State = 430; boolOperand(_localctx.oper);

								_localctx.oper.Push(new ExprStackObject()
								{
									type = ObjType.Operation,
									value = (_localctx._NOT!=null?_localctx._NOT.Text:null),
										parser = this
								});
							
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 433; Match(LPAREN);
				State = 434; boolExprEx(_localctx.oper);
				State = 435; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		public ExprClass oper;
		public BoolOperandContext left;
		public IToken andor;
		public BoolExprContext right;
		public BoolOperandContext boolOperand() {
			return GetRuleContext<BoolOperandContext>(0);
		}
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ITerminalNode AND() { return GetToken(NinjaParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(NinjaParser.OR, 0); }
		public BoolExprContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public BoolExprContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBoolExpr(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr(ExprClass oper) {
		BoolExprContext _localctx = new BoolExprContext(Context, State, oper);
		EnterRule(_localctx, 66, RULE_boolExpr);
		int _la;
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 439; boolOperand(_localctx.oper);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 440; _localctx.left = boolOperand(_localctx.oper);
				State = 441;
				_localctx.andor = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AND || _la==OR) ) {
					_localctx.andor = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 442; _localctx.right = boolExpr(_localctx.oper);

								_localctx.oper.Push(new ExprStackObject()
								{
									type = ObjType.Operation,
									value = (_localctx.andor!=null?_localctx.andor.Text:null),
										parser = this
								});
				           
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExprExContext : ParserRuleContext {
		public ExprClass oper;
		public ExprClass res;
		public AriphIDContext left;
		public BoolExprExContext right;
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(NinjaParser.ASSIGN, 0); }
		public AriphIDContext ariphID() {
			return GetRuleContext<AriphIDContext>(0);
		}
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public BoolExprExContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public BoolExprExContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_boolExprEx; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterBoolExprEx(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitBoolExprEx(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprExContext boolExprEx(ExprClass oper) {
		BoolExprExContext _localctx = new BoolExprExContext(Context, State, oper);
		EnterRule(_localctx, 68, RULE_boolExprEx);
		try {
			State = 455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447; boolExpr(_localctx.oper);

								_localctx.res =  _localctx.oper;
						   
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450; _localctx.left = ariphID(_localctx.oper);
				State = 451; Match(ASSIGN);
				State = 452; _localctx.right = boolExprEx(_localctx.oper);

								_localctx.oper.Push(new ExprStackObject()
								{
									type = ObjType.Operation,
									value = "=",
										parser = this
								});
								_localctx.res =  _localctx.oper;
				           
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ExprClass oper;
		public ExprClass res;
		public AriphIDContext _ariphID;
		public AriphExprExContext _ariphExprEx;
		public BoolExprExContext _boolExprEx;
		public ITerminalNode INTKEY() { return GetToken(NinjaParser.INTKEY, 0); }
		public AriphIDContext ariphID() {
			return GetRuleContext<AriphIDContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(NinjaParser.ASSIGN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode DOUBLEKEY() { return GetToken(NinjaParser.DOUBLEKEY, 0); }
		public ITerminalNode BOOLKEY() { return GetToken(NinjaParser.BOOLKEY, 0); }
		public BoolExprExContext boolExprEx() {
			return GetRuleContext<BoolExprExContext>(0);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public DeclareContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare(ExprClass oper) {
		DeclareContext _localctx = new DeclareContext(Context, State, oper);
		EnterRule(_localctx, 70, RULE_declare);
		int _la;
		try {
			State = 484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTKEY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 457; Match(INTKEY);
				State = 458; _localctx._ariphID = ariphID(_localctx.oper);

				           VarData newVar = new VarData
				           {
				           		name = (_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null),
				                type = VarType.Int
				           };
				           curBlock.varTable.Add((_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null), newVar);
				          
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 460; Match(ASSIGN);
					State = 461; _localctx._ariphExprEx = ariphExprEx(_localctx.oper);
					}
				}


				           if ((_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) != null)
				           {
								_localctx.oper.Push(new ExprStackObject()
									 {
										type = ObjType.Operation,
										value = "=",
										parser = this
									 });
				           }
				           _localctx.res =  _localctx.oper;
				          
				}
				break;
			case DOUBLEKEY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 466; Match(DOUBLEKEY);
				State = 467; _localctx._ariphID = ariphID(_localctx.oper);

				           VarData newVar = new VarData
				           {	
				           		name = (_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null),
				                type = VarType.Double
				           };
				           curBlock.varTable.Add((_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null), newVar);
				          
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 469; Match(ASSIGN);
					State = 470; _localctx._ariphExprEx = ariphExprEx(_localctx.oper);
					}
				}


				           if ((_localctx._ariphExprEx!=null?TokenStream.GetText(_localctx._ariphExprEx.Start,_localctx._ariphExprEx.Stop):null) != null)
				           {
				                _localctx.oper.Push(new ExprStackObject()
									 {
										type = ObjType.Operation,
										value = "=",
										parser = this
									 });
				           }
				           _localctx.res =  _localctx.oper;
				          
				}
				break;
			case BOOLKEY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 475; Match(BOOLKEY);
				State = 476; _localctx._ariphID = ariphID(_localctx.oper);

				           VarData newVar = new VarData
				           {
				           		name = (_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null),
				                type = VarType.Bool
				           };
				           curBlock.varTable.Add((_localctx._ariphID!=null?TokenStream.GetText(_localctx._ariphID.Start,_localctx._ariphID.Stop):null), newVar);
				          
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 478; Match(ASSIGN);
					State = 479; _localctx._boolExprEx = boolExprEx(_localctx.oper);
					}
				}


				           if ((_localctx._boolExprEx!=null?TokenStream.GetText(_localctx._boolExprEx.Start,_localctx._boolExprEx.Stop):null) != null)
				           {
				                _localctx.oper.Push(new ExprStackObject()
								{
									type = ObjType.Operation,
									value = "=",
										parser = this
								});
				           }
				           _localctx.res =  _localctx.oper;
				          
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AriphIDContext : ParserRuleContext {
		public ExprClass oper;
		public IToken _ID;
		public ITerminalNode ID() { return GetToken(NinjaParser.ID, 0); }
		public AriphIDContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public AriphIDContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_ariphID; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterAriphID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitAriphID(this);
		}
	}

	[RuleVersion(0)]
	public AriphIDContext ariphID(ExprClass oper) {
		AriphIDContext _localctx = new AriphIDContext(Context, State, oper);
		EnterRule(_localctx, 72, RULE_ariphID);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; _localctx._ID = Match(ID);

						_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Var,
									value = (_localctx._ID!=null?_localctx._ID.Text:null),
									parser = this
								 });
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrigContext : ParserRuleContext {
		public ExprClass oper;
		public IToken trfun;
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext ariphExprEx() {
			return GetRuleContext<AriphExprExContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public ITerminalNode SIN() { return GetToken(NinjaParser.SIN, 0); }
		public ITerminalNode COS() { return GetToken(NinjaParser.COS, 0); }
		public ITerminalNode TAN() { return GetToken(NinjaParser.TAN, 0); }
		public ITerminalNode ASIN() { return GetToken(NinjaParser.ASIN, 0); }
		public ITerminalNode ACOS() { return GetToken(NinjaParser.ACOS, 0); }
		public ITerminalNode ATAN() { return GetToken(NinjaParser.ATAN, 0); }
		public TrigContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public TrigContext(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_trig; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterTrig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitTrig(this);
		}
	}

	[RuleVersion(0)]
	public TrigContext trig(ExprClass oper) {
		TrigContext _localctx = new TrigContext(Context, State, oper);
		EnterRule(_localctx, 74, RULE_trig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			_localctx.trfun = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SIN) | (1L << COS) | (1L << TAN) | (1L << ASIN) | (1L << ACOS) | (1L << ATAN))) != 0)) ) {
				_localctx.trfun = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 490; Match(LPAREN);
			State = 491; ariphExprEx(_localctx.oper);
			State = 492; Match(RPAREN);

			              			_localctx.oper.Push(new ExprStackObject()
			              					 {
			              						type = ObjType.Operation,
			              						value = (_localctx.trfun!=null?_localctx.trfun.Text:null),
			              						parser = this
			              					 });
			              		
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trig2Context : ParserRuleContext {
		public ExprClass oper;
		public ITerminalNode ATAN2() { return GetToken(NinjaParser.ATAN2, 0); }
		public ITerminalNode LPAREN() { return GetToken(NinjaParser.LPAREN, 0); }
		public AriphExprExContext[] ariphExprEx() {
			return GetRuleContexts<AriphExprExContext>();
		}
		public AriphExprExContext ariphExprEx(int i) {
			return GetRuleContext<AriphExprExContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(NinjaParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(NinjaParser.RPAREN, 0); }
		public Trig2Context(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public Trig2Context(ParserRuleContext parent, int invokingState, ExprClass oper)
			: base(parent, invokingState)
		{
			this.oper = oper;
		}
		public override int RuleIndex { get { return RULE_trig2; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterTrig2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitTrig2(this);
		}
	}

	[RuleVersion(0)]
	public Trig2Context trig2(ExprClass oper) {
		Trig2Context _localctx = new Trig2Context(Context, State, oper);
		EnterRule(_localctx, 76, RULE_trig2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(ATAN2);
			State = 496; Match(LPAREN);
			State = 497; ariphExprEx(_localctx.oper);
			State = 498; Match(COMMA);
			State = 499; ariphExprEx(_localctx.oper);
			State = 500; Match(RPAREN);

						_localctx.oper.Push(new ExprStackObject()
								 {
									type = ObjType.Operation,
									value = "atan2",
									parser = this
								 });
					
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeaningfulTypeContext : ParserRuleContext {
		public ITerminalNode INTKEY() { return GetToken(NinjaParser.INTKEY, 0); }
		public ITerminalNode DOUBLEKEY() { return GetToken(NinjaParser.DOUBLEKEY, 0); }
		public ITerminalNode BOOLKEY() { return GetToken(NinjaParser.BOOLKEY, 0); }
		public MeaningfulTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meaningfulType; } }
		public override void EnterRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.EnterMeaningfulType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INinjaListener typedListener = listener as INinjaListener;
			if (typedListener != null) typedListener.ExitMeaningfulType(this);
		}
	}

	[RuleVersion(0)]
	public MeaningfulTypeContext meaningfulType() {
		MeaningfulTypeContext _localctx = new MeaningfulTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_meaningfulType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTKEY) | (1L << DOUBLEKEY) | (1L << BOOLKEY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x44', '\x1FC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x3', '\x2', '\a', '\x2', 'T', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', 'W', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '[', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '^', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'q', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\a', 
		'\n', '\x90', '\n', '\n', '\f', '\n', '\xE', '\n', '\x93', '\v', '\n', 
		'\x3', '\v', '\a', '\v', '\x96', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x99', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xA5', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		'\xAE', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xB1', '\v', '\xE', '\x5', 
		'\xE', '\xB3', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xC3', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xCF', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xDD', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xEC', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xEF', '\v', '\x17', '\x5', 
		'\x17', '\xF1', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xF9', '\n', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x103', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x106', '\v', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', 
		'\x19', '\x10D', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x110', '\v', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x11D', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x120', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x12D', 
		'\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x130', '\v', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\a', '\x1C', '\x139', '\n', '\x1C', '\f', '\x1C', 
		'\xE', '\x1C', '\x13C', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x14F', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x5', '\x1D', '\x154', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x159', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x15F', '\n', '\x1D', '\f', 
		'\x1D', '\xE', '\x1D', '\x162', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x182', '\n', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x187', 
		'\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x18A', '\v', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\a', ' ', '\x192', '\n', ' ', '\f', ' ', '\xE', ' ', '\x195', '\v', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x1A1', '\n', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x1B8', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x5', '#', '\x1C0', '\n', '#', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x5', '$', '\x1CA', '\n', '$', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1D1', '\n', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x1DA', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1E3', '\n', '%', 
		'\x3', '%', '\x3', '%', '\x5', '%', '\x1E7', '\n', '%', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x2', '\x2', '*', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', '\x2', 
		'\f', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\n', '\v', '\x3', '\x2', 
		'\"', '#', '\x3', '\x2', '\x1E', '!', '\x3', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '$', '*', '\x3', '\x2', '.', '\x33', '\x3', '\x2', '+', ',', '\x3', 
		'\x2', '\x15', '\x1A', '\x3', '\x2', '\r', '\xF', '\x2', '\x20E', '\x2', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x4', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'g', '\x3', '\x2', '\x2', '\x2', '\b', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'r', '\x3', '\x2', '\x2', '\x2', '\f', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x10', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x97', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA6', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xC2', '\x3', '\x2', '\x2', '\x2', ' ', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xC6', '\x3', '\x2', '\x2', '\x2', '$', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xDC', '\x3', '\x2', '\x2', '\x2', '(', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xE2', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '.', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x32', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x124', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x38', '\x144', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x181', '\x3', '\x2', '\x2', '\x2', '<', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x18D', '\x3', '\x2', '\x2', '\x2', '@', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1C9', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1E6', '\x3', '\x2', '\x2', '\x2', 'J', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1EB', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1F1', '\x3', '\x2', '\x2', '\x2', 'P', '\x1F9', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'T', '\x5', '\b', '\x5', '\x2', 'S', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', '\\', '\x5', 
		'\x4', '\x3', '\x2', 'Y', '[', '\x5', '\b', '\x5', '\x2', 'Z', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', 
		'_', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\b', '\x2', '\x1', '\x2', '`', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\x5', '\x6', '\x4', '\x2', '\x62', '\x63', '\a', 
		'>', '\x2', '\x2', '\x63', '\x64', '\x5', '\x14', '\v', '\x2', '\x64', 
		'\x65', '\a', '?', '\x2', '\x2', '\x65', '\x66', '\b', '\x3', '\x1', '\x2', 
		'\x66', '\x5', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', ';', '\x2', 
		'\x2', 'h', 'i', '\a', '<', '\x2', '\x2', 'i', 'j', '\a', ':', '\x2', 
		'\x2', 'j', 'k', '\a', '@', '\x2', '\x2', 'k', 'l', '\a', '\x41', '\x2', 
		'\x2', 'l', 'm', '\b', '\x4', '\x1', '\x2', 'm', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'q', '\x5', '\n', '\x6', '\x2', 'o', 'q', '\x5', '\xE', '\b', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', '\t', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x5', '\f', '\a', 
		'\x2', 's', 't', '\a', '>', '\x2', '\x2', 't', 'u', '\x5', '\x12', '\n', 
		'\x2', 'u', 'v', '\a', '?', '\x2', '\x2', 'v', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\a', ';', '\x2', '\x2', 'x', 'y', '\a', '<', '\x2', 
		'\x2', 'y', 'z', '\a', '\x44', '\x2', '\x2', 'z', '{', '\b', '\a', '\x1', 
		'\x2', '{', '|', '\a', '@', '\x2', '\x2', '|', '}', '\x5', '\x1A', '\xE', 
		'\x2', '}', '~', '\a', '\x41', '\x2', '\x2', '~', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\x5', '\x10', '\t', '\x2', '\x80', '\x81', 
		'\a', '>', '\x2', '\x2', '\x81', '\x82', '\x5', '\x12', '\n', '\x2', '\x82', 
		'\x83', '\x5', '\x18', '\r', '\x2', '\x83', '\x84', '\a', '?', '\x2', 
		'\x2', '\x84', '\x85', '\b', '\b', '\x1', '\x2', '\x85', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x87', '\a', ';', '\x2', '\x2', '\x87', 
		'\x88', '\x5', 'P', ')', '\x2', '\x88', '\x89', '\a', '\x44', '\x2', '\x2', 
		'\x89', '\x8A', '\b', '\t', '\x1', '\x2', '\x8A', '\x8B', '\a', '@', '\x2', 
		'\x2', '\x8B', '\x8C', '\x5', '\x1A', '\xE', '\x2', '\x8C', '\x8D', '\a', 
		'\x41', '\x2', '\x2', '\x8D', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x90', '\x5', '\x16', '\f', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x93', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x96', '\x5', '\x16', '\f', '\x2', '\x95', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x99', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x15', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\xA5', '\x5', '$', '\x13', '\x2', '\x9B', 
		'\xA5', '\x5', '*', '\x16', '\x2', '\x9C', '\xA5', '\x5', 'H', '%', '\x2', 
		'\x9D', '\xA5', '\x5', '@', '!', '\x2', '\x9E', '\xA5', '\x5', '\x46', 
		'$', '\x2', '\x9F', '\xA5', '\x5', '\x30', '\x19', '\x2', '\xA0', '\xA5', 
		'\x5', '\x32', '\x1A', '\x2', '\xA1', '\xA5', '\x5', '\x34', '\x1B', '\x2', 
		'\xA2', '\xA5', '\x5', '\x36', '\x1C', '\x2', '\xA3', '\xA5', '\x5', '\x38', 
		'\x1D', '\x2', '\xA4', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', 
		'\a', '\x38', '\x2', '\x2', '\xA7', '\xA8', '\x5', '.', '\x18', '\x2', 
		'\xA8', '\xA9', '\b', '\r', '\x1', '\x2', '\xA9', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAF', '\x5', '\x1C', '\xF', '\x2', '\xAB', '\xAC', 
		'\a', '=', '\x2', '\x2', '\xAC', '\xAE', '\x5', '\x1C', '\xF', '\x2', 
		'\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x5', 'P', ')', '\x2', '\xB5', 
		'\xB6', '\a', '\x44', '\x2', '\x2', '\xB6', '\xB7', '\b', '\xF', '\x1', 
		'\x2', '\xB7', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', 
		'\x3', '\x2', '\x2', '\xB9', '\xC3', '\b', '\x10', '\x1', '\x2', '\xBA', 
		'\xBB', '\a', '\x4', '\x2', '\x2', '\xBB', '\xC3', '\b', '\x10', '\x1', 
		'\x2', '\xBC', '\xBD', '\a', '\x5', '\x2', '\x2', '\xBD', '\xC3', '\b', 
		'\x10', '\x1', '\x2', '\xBE', '\xBF', '\a', '\x6', '\x2', '\x2', '\xBF', 
		'\xC3', '\b', '\x10', '\x1', '\x2', '\xC0', '\xC1', '\a', '\a', '\x2', 
		'\x2', '\xC1', '\xC3', '\b', '\x10', '\x1', '\x2', '\xC2', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC3', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\t', '\x2', '\x2', '\x2', '\xC5', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\t', '\x3', '\x2', '\x2', 
		'\xC7', '#', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x5', '&', '\x14', 
		'\x2', '\xC9', '\xCA', '\b', '\x13', '\x1', '\x2', '\xCA', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\x5', '(', '\x15', '\x2', '\xCC', 
		'\xCD', '\b', '\x13', '\x1', '\x2', '\xCD', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '%', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\x5', ' ', '\x11', '\x2', '\xD1', '\xD2', '\a', '@', '\x2', '\x2', 
		'\xD2', '\xD3', '\x5', ',', '\x17', '\x2', '\xD3', '\xD4', '\a', '\x41', 
		'\x2', '\x2', '\xD4', '\xD5', '\b', '\x14', '\x1', '\x2', '\xD5', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x5', '\x1E', '\x10', '\x2', 
		'\xD7', '\xD8', '\a', '@', '\x2', '\x2', '\xD8', '\xD9', '\x5', ',', '\x17', 
		'\x2', '\xD9', '\xDA', '\a', '\x41', '\x2', '\x2', '\xDA', '\xDB', '\b', 
		'\x14', '\x1', '\x2', '\xDB', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\'', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x5', 
		'\"', '\x12', '\x2', '\xDF', '\xE0', '\a', '@', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\x41', '\x2', '\x2', '\xE1', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\a', '\x44', '\x2', '\x2', '\xE3', '\xE4', '\a', 
		'@', '\x2', '\x2', '\xE4', '\xE5', '\x5', ',', '\x17', '\x2', '\xE5', 
		'\xE6', '\a', '\x41', '\x2', '\x2', '\xE6', '\xE7', '\b', '\x16', '\x1', 
		'\x2', '\xE7', '+', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xED', '\x5', 
		'.', '\x18', '\x2', '\xE9', '\xEA', '\a', '=', '\x2', '\x2', '\xEA', '\xEC', 
		'\x5', '.', '\x18', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF1', '-', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', 
		'\x5', '@', '!', '\x2', '\xF3', '\xF4', '\b', '\x18', '\x1', '\x2', '\xF4', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x5', '\x46', '$', 
		'\x2', '\xF6', '\xF7', '\b', '\x18', '\x1', '\x2', '\xF7', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF9', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFB', '\b', '\x19', '\x1', '\x2', '\xFB', '\xFC', '\a', 
		'\x13', '\x2', '\x2', '\xFC', '\xFD', '\a', '@', '\x2', '\x2', '\xFD', 
		'\xFE', '\x5', '\x46', '$', '\x2', '\xFE', '\xFF', '\a', '\x41', '\x2', 
		'\x2', '\xFF', '\x100', '\a', '>', '\x2', '\x2', '\x100', '\x104', '\b', 
		'\x19', '\x1', '\x2', '\x101', '\x103', '\x5', '\x16', '\f', '\x2', '\x102', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\a', 
		'?', '\x2', '\x2', '\x108', '\x109', '\a', '\x14', '\x2', '\x2', '\x109', 
		'\x10A', '\a', '>', '\x2', '\x2', '\x10A', '\x10E', '\b', '\x19', '\x1', 
		'\x2', '\x10B', '\x10D', '\x5', '\x16', '\f', '\x2', '\x10C', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x111', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', '?', '\x2', 
		'\x2', '\x112', '\x113', '\b', '\x19', '\x1', '\x2', '\x113', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\b', '\x1A', '\x1', '\x2', 
		'\x115', '\x116', '\a', '\x13', '\x2', '\x2', '\x116', '\x117', '\a', 
		'@', '\x2', '\x2', '\x117', '\x118', '\x5', '\x46', '$', '\x2', '\x118', 
		'\x119', '\a', '\x41', '\x2', '\x2', '\x119', '\x11A', '\a', '>', '\x2', 
		'\x2', '\x11A', '\x11E', '\b', '\x1A', '\x1', '\x2', '\x11B', '\x11D', 
		'\x5', '\x16', '\f', '\x2', '\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x122', '\a', '?', '\x2', '\x2', '\x122', '\x123', '\b', 
		'\x1A', '\x1', '\x2', '\x123', '\x33', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x125', '\b', '\x1B', '\x1', '\x2', '\x125', '\x126', '\a', '\x10', '\x2', 
		'\x2', '\x126', '\x127', '\a', '@', '\x2', '\x2', '\x127', '\x128', '\x5', 
		'\x46', '$', '\x2', '\x128', '\x129', '\a', '\x41', '\x2', '\x2', '\x129', 
		'\x12A', '\a', '>', '\x2', '\x2', '\x12A', '\x12E', '\b', '\x1B', '\x1', 
		'\x2', '\x12B', '\x12D', '\x5', '\x16', '\f', '\x2', '\x12C', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x131', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\a', '?', '\x2', 
		'\x2', '\x132', '\x133', '\b', '\x1B', '\x1', '\x2', '\x133', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\a', '\x12', '\x2', '\x2', 
		'\x135', '\x136', '\a', '>', '\x2', '\x2', '\x136', '\x13A', '\b', '\x1C', 
		'\x1', '\x2', '\x137', '\x139', '\x5', '\x16', '\f', '\x2', '\x138', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\a', '?', '\x2', 
		'\x2', '\x13E', '\x13F', '\a', '\x10', '\x2', '\x2', '\x13F', '\x140', 
		'\a', '@', '\x2', '\x2', '\x140', '\x141', '\x5', '\x46', '$', '\x2', 
		'\x141', '\x142', '\a', '\x41', '\x2', '\x2', '\x142', '\x143', '\b', 
		'\x1C', '\x1', '\x2', '\x143', '\x37', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x145', '\b', '\x1D', '\x1', '\x2', '\x145', '\x146', '\a', '\x11', '\x2', 
		'\x2', '\x146', '\x147', '\a', '@', '\x2', '\x2', '\x147', '\x14E', '\b', 
		'\x1D', '\x1', '\x2', '\x148', '\x149', '\x5', 'H', '%', '\x2', '\x149', 
		'\x14A', '\b', '\x1D', '\x1', '\x2', '\x14A', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14C', '\x5', '@', '!', '\x2', '\x14C', '\x14D', '\b', 
		'\x1D', '\x1', '\x2', '\x14D', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\a', '\f', '\x2', '\x2', 
		'\x151', '\x153', '\b', '\x1D', '\x1', '\x2', '\x152', '\x154', '\x5', 
		'\x46', '$', '\x2', '\x153', '\x152', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x156', '\a', '\f', '\x2', '\x2', '\x156', '\x158', '\b', 
		'\x1D', '\x1', '\x2', '\x157', '\x159', '\x5', '@', '!', '\x2', '\x158', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', 
		'\a', '\x41', '\x2', '\x2', '\x15B', '\x15C', '\a', '>', '\x2', '\x2', 
		'\x15C', '\x160', '\b', '\x1D', '\x1', '\x2', '\x15D', '\x15F', '\x5', 
		'\x16', '\f', '\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x164', '\a', '?', '\x2', '\x2', '\x164', '\x165', '\b', '\x1D', 
		'\x1', '\x2', '\x165', '\x39', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', 
		'\a', '\x37', '\x2', '\x2', '\x167', '\x182', '\b', '\x1E', '\x1', '\x2', 
		'\x168', '\x169', '\a', '\x36', '\x2', '\x2', '\x169', '\x182', '\b', 
		'\x1E', '\x1', '\x2', '\x16A', '\x16B', '\x5', '*', '\x16', '\x2', '\x16B', 
		'\x16C', '\b', '\x1E', '\x1', '\x2', '\x16C', '\x182', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x16E', '\x5', '$', '\x13', '\x2', '\x16E', '\x16F', 
		'\b', '\x1E', '\x1', '\x2', '\x16F', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x171', '\x5', 'J', '&', '\x2', '\x171', '\x172', '\b', '\x1E', 
		'\x1', '\x2', '\x172', '\x182', '\x3', '\x2', '\x2', '\x2', '\x173', '\x182', 
		'\x5', 'L', '\'', '\x2', '\x174', '\x182', '\x5', 'N', '(', '\x2', '\x175', 
		'\x176', '\t', '\x4', '\x2', '\x2', '\x176', '\x177', '\x5', 'J', '&', 
		'\x2', '\x177', '\x178', '\b', '\x1E', '\x1', '\x2', '\x178', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x5', 'J', '&', '\x2', 
		'\x17A', '\x17B', '\t', '\x4', '\x2', '\x2', '\x17B', '\x17C', '\b', '\x1E', 
		'\x1', '\x2', '\x17C', '\x182', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', 
		'\a', '@', '\x2', '\x2', '\x17E', '\x17F', '\x5', '@', '!', '\x2', '\x17F', 
		'\x180', '\a', '\x41', '\x2', '\x2', '\x180', '\x182', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x166', '\x3', '\x2', '\x2', '\x2', '\x181', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x181', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x181', '\x173', '\x3', '\x2', '\x2', '\x2', '\x181', 
		'\x174', '\x3', '\x2', '\x2', '\x2', '\x181', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x179', '\x3', '\x2', '\x2', '\x2', '\x181', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x182', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x188', '\x5', ':', '\x1E', '\x2', '\x184', '\x185', '\t', '\x5', 
		'\x2', '\x2', '\x185', '\x187', '\x5', ':', '\x1E', '\x2', '\x186', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x187', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x186', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x188', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\b', '\x1F', '\x1', 
		'\x2', '\x18C', '=', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x5', 
		'<', '\x1F', '\x2', '\x18E', '\x193', '\b', ' ', '\x1', '\x2', '\x18F', 
		'\x190', '\t', '\x6', '\x2', '\x2', '\x190', '\x192', '\x5', '<', '\x1F', 
		'\x2', '\x191', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x192', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x194', '\x3', '\x2', '\x2', '\x2', '\x194', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x193', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x197', '\b', ' ', '\x1', '\x2', '\x197', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x199', '\x5', '>', ' ', '\x2', '\x199', '\x19A', '\b', '!', 
		'\x1', '\x2', '\x19A', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', 
		'\x5', 'J', '&', '\x2', '\x19C', '\x19D', '\t', '\a', '\x2', '\x2', '\x19D', 
		'\x19E', '\x5', '@', '!', '\x2', '\x19E', '\x19F', '\b', '!', '\x1', '\x2', 
		'\x19F', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x1A0', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x1A1', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\a', '\x35', '\x2', 
		'\x2', '\x1A3', '\x1B8', '\b', '\"', '\x1', '\x2', '\x1A4', '\x1A5', '\x5', 
		'*', '\x16', '\x2', '\x1A5', '\x1A6', '\b', '\"', '\x1', '\x2', '\x1A6', 
		'\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\x5', 'J', '&', 
		'\x2', '\x1A8', '\x1A9', '\b', '\"', '\x1', '\x2', '\x1A9', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x5', '@', '!', '\x2', '\x1AB', 
		'\x1AC', '\t', '\b', '\x2', '\x2', '\x1AC', '\x1AD', '\x5', '@', '!', 
		'\x2', '\x1AD', '\x1AE', '\b', '\"', '\x1', '\x2', '\x1AE', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\a', '-', '\x2', '\x2', '\x1B0', 
		'\x1B1', '\x5', '\x42', '\"', '\x2', '\x1B1', '\x1B2', '\b', '\"', '\x1', 
		'\x2', '\x1B2', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\a', '@', '\x2', '\x2', '\x1B4', '\x1B5', '\x5', '\x46', '$', '\x2', 
		'\x1B5', '\x1B6', '\a', '\x41', '\x2', '\x2', '\x1B6', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1B7', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1A7', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1C0', '\x5', 
		'\x42', '\"', '\x2', '\x1BA', '\x1BB', '\x5', '\x42', '\"', '\x2', '\x1BB', 
		'\x1BC', '\t', '\t', '\x2', '\x2', '\x1BC', '\x1BD', '\x5', '\x44', '#', 
		'\x2', '\x1BD', '\x1BE', '\b', '#', '\x1', '\x2', '\x1BE', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1BF', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1C1', '\x1C2', '\x5', '\x44', '#', '\x2', '\x1C2', '\x1C3', 
		'\b', '$', '\x1', '\x2', '\x1C3', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C5', '\x5', 'J', '&', '\x2', '\x1C5', '\x1C6', '\a', '$', 
		'\x2', '\x2', '\x1C6', '\x1C7', '\x5', '\x46', '$', '\x2', '\x1C7', '\x1C8', 
		'\b', '$', '\x1', '\x2', '\x1C8', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1C9', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1C4', '\x3', 
		'\x2', '\x2', '\x2', '\x1CA', 'G', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'\x1CC', '\a', '\r', '\x2', '\x2', '\x1CC', '\x1CD', '\x5', 'J', '&', 
		'\x2', '\x1CD', '\x1D0', '\b', '%', '\x1', '\x2', '\x1CE', '\x1CF', '\a', 
		'$', '\x2', '\x2', '\x1CF', '\x1D1', '\x5', '@', '!', '\x2', '\x1D0', 
		'\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', 
		'\b', '%', '\x1', '\x2', '\x1D3', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\x1D5', '\a', '\xE', '\x2', '\x2', '\x1D5', '\x1D6', '\x5', 
		'J', '&', '\x2', '\x1D6', '\x1D9', '\b', '%', '\x1', '\x2', '\x1D7', '\x1D8', 
		'\a', '$', '\x2', '\x2', '\x1D8', '\x1DA', '\x5', '@', '!', '\x2', '\x1D9', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', 
		'\b', '%', '\x1', '\x2', '\x1DC', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1DD', '\x1DE', '\a', '\xF', '\x2', '\x2', '\x1DE', '\x1DF', '\x5', 
		'J', '&', '\x2', '\x1DF', '\x1E2', '\b', '%', '\x1', '\x2', '\x1E0', '\x1E1', 
		'\a', '$', '\x2', '\x2', '\x1E1', '\x1E3', '\x5', '\x46', '$', '\x2', 
		'\x1E2', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x3', 
		'\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1E5', '\b', '%', '\x1', '\x2', '\x1E5', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1DD', '\x3', '\x2', '\x2', '\x2', 
		'\x1E7', 'I', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', '\x44', 
		'\x2', '\x2', '\x1E9', '\x1EA', '\b', '&', '\x1', '\x2', '\x1EA', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\t', '\n', '\x2', '\x2', 
		'\x1EC', '\x1ED', '\a', '@', '\x2', '\x2', '\x1ED', '\x1EE', '\x5', '@', 
		'!', '\x2', '\x1EE', '\x1EF', '\a', '\x41', '\x2', '\x2', '\x1EF', '\x1F0', 
		'\b', '\'', '\x1', '\x2', '\x1F0', 'M', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1F2', '\a', '\x1B', '\x2', '\x2', '\x1F2', '\x1F3', '\a', '@', '\x2', 
		'\x2', '\x1F3', '\x1F4', '\x5', '@', '!', '\x2', '\x1F4', '\x1F5', '\a', 
		'=', '\x2', '\x2', '\x1F5', '\x1F6', '\x5', '@', '!', '\x2', '\x1F6', 
		'\x1F7', '\a', '\x41', '\x2', '\x2', '\x1F7', '\x1F8', '\b', '(', '\x1', 
		'\x2', '\x1F8', 'O', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\t', 
		'\v', '\x2', '\x2', '\x1FA', 'Q', '\x3', '\x2', '\x2', '\x2', '$', 'U', 
		'\\', 'p', '\x91', '\x97', '\xA4', '\xAF', '\xB2', '\xC2', '\xCE', '\xDC', 
		'\xED', '\xF0', '\xF8', '\x104', '\x10E', '\x11E', '\x12E', '\x13A', '\x14E', 
		'\x153', '\x158', '\x160', '\x181', '\x188', '\x193', '\x1A0', '\x1B7', 
		'\x1BF', '\x1C9', '\x1D0', '\x1D9', '\x1E2', '\x1E6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
